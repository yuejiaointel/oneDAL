<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classoneapi_1_1dal_1_1v1_1_1csr__accessor" kind="class" language="C++" prot="public">
    <compoundname>oneapi::dal::v1::csr_accessor</compoundname>
    <includes refid="csr__accessor_8hpp" local="no">csr_accessor.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1ab027bea168d2ecaeafcd7086740888ef" prot="public" static="no">
        <type>std::remove_const_t&lt; T &gt;</type>
        <definition>using data_t =  std::remove_const_t&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>data_t</name>
        <qualifiedname>oneapi::dal::v1::csr_accessor::data_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="34" column="5" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a63413f9d18c03d6f03ab979692151d51" prot="public" static="no">
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; data_t &gt;</type>
        <definition>using array_d =  dal::array&lt;data_t&gt;</definition>
        <argsstring></argsstring>
        <name>array_d</name>
        <qualifiedname>oneapi::dal::v1::csr_accessor::array_d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="35" column="5" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a56911fd310363e2947072d8852d9a16b" prot="public" static="no">
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; std::int64_t &gt;</type>
        <definition>using array_i =  dal::array&lt;std::int64_t&gt;</definition>
        <argsstring></argsstring>
        <name>array_i</name>
        <qualifiedname>oneapi::dal::v1::csr_accessor::array_i</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="36" column="5" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1aa07a3395ff8de80ec7c590f0f73a8054" prot="public" static="no">
        <type>std::conditional&lt; is_readonly, conststd::int64_t, std::int64_t &gt;::type</type>
        <definition>typedef std::conditional&lt;is_readonly,conststd::int64_t,std::int64_t&gt;::type I</definition>
        <argsstring></argsstring>
        <name>I</name>
        <qualifiedname>oneapi::dal::v1::csr_accessor::I</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="38" column="46" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a01b5eaa93b39348c465be9a080c669af" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool is_readonly</definition>
        <argsstring></argsstring>
        <name>is_readonly</name>
        <qualifiedname>oneapi::dal::v1::csr_accessor::is_readonly</qualifiedname>
        <initializer>= std::is_const_v&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="37" column="27" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a0e976b12833ac402660dc1ab10678d5e" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; detail::pull_csr_block_iface &gt;</type>
        <definition>std::shared_ptr&lt;detail::pull_csr_block_iface&gt; pull_iface_</definition>
        <argsstring></argsstring>
        <name>pull_iface_</name>
        <qualifiedname>oneapi::dal::v1::csr_accessor::pull_iface_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="225" column="21" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a20577e5e4416c4471db791c86c729bfc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_const_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>csr_accessor</definition>
        <argsstring>(const csr_table &amp;table)</argsstring>
        <name>csr_accessor</name>
        <qualifiedname>oneapi::dal::v1::csr_accessor::csr_accessor</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table" kindref="compound">csr_table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a read-only accessor object from the csr table. Available only for const-qualified :literal:<computeroutput>T</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data values in blocks returned by the accessor. Should be const-qualified for read-only access. An accessor supports at least :expr:<computeroutput>float</computeroutput>, :expr:<computeroutput>double</computeroutput>, and :expr:<computeroutput>std::int32_t</computeroutput> types of :literal:<computeroutput>U</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Input CSR table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="49" column="14" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1abbe0f6cf859c3dc308e450d166499569" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_d</ref>, <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_i</ref>, <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_i</ref> &gt;</type>
        <definition>std::tuple&lt; array_d, array_i, array_i &gt; pull</definition>
        <argsstring>(const range &amp;row_range={ 0, -1 }, const sparse_indexing indexing=sparse_indexing::one_based) const</argsstring>
        <name>pull</name>
        <qualifiedname>oneapi::dal::v1::csr_accessor::pull</qualifiedname>
        <param>
          <type>const <ref refid="structoneapi_1_1dal_1_1v1_1_1range" kindref="compound">range</ref> &amp;</type>
          <declname>row_range</declname>
          <defval>{ 0, -1 }</defval>
        </param>
        <param>
          <type>const sparse_indexing</type>
          <declname>indexing</declname>
          <defval>sparse_indexing::one_based</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides access to the rows of the table in CSR format The method returns arrays that directly point to the memory within the table if it is possible. In that case, the arrays refer to the memory as immutable data. Otherwise, new memory blocks are allocated, and the data from the table rows is converted and copied into those blocks. In this case, arrays refer to the blocks as mutable data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">row_range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range of rows that data is returned from the accessor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indexing</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexing scheme used to access the data in the returned arrays in CSR layout. Should be :literal:<computeroutput>sparse_indexing::zero_based</computeroutput> or :literal:<computeroutput>sparse_indexing::one_based</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tuple of three arrays: values, column indicies, and row offsets that represent a sub-table in CSR format that contain the data from the original table corresponding to the rows from the <computeroutput>row_range</computeroutput> and with the requested indexing scheme. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="71" column="16" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="71" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a64c297db67aec2993a992b3eb287c8f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_d</ref>, <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_i</ref>, <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_i</ref> &gt;</type>
        <definition>std::tuple&lt; array_d, array_i, array_i &gt; pull</definition>
        <argsstring>(sycl::queue &amp;queue, const range &amp;row_range={ 0, -1 }, const sparse_indexing indexing=sparse_indexing::one_based, const sycl::usm::alloc &amp;alloc=sycl::usm::alloc::shared) const</argsstring>
        <name>pull</name>
        <qualifiedname>oneapi::dal::v1::csr_accessor::pull</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const <ref refid="structoneapi_1_1dal_1_1v1_1_1range" kindref="compound">range</ref> &amp;</type>
          <declname>row_range</declname>
          <defval>{ 0, -1 }</defval>
        </param>
        <param>
          <type>const sparse_indexing</type>
          <declname>indexing</declname>
          <defval>sparse_indexing::one_based</defval>
        </param>
        <param>
          <type>const sycl::usm::alloc &amp;</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides access to the rows of the table in CSR format The method returns arrays that directly point to the memory within the table if it is possible. In that case, the arrays refer to the memory as immutable data. Otherwise, new memory blocks are allocated, and the data from the table rows is converted and copied into those blocks. In this case, arrays refer to the blocks as mutable data.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">row_range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range of rows that data is returned from the accessor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indexing</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexing scheme used to access the data in the returned arrays in CSR layout. Should be :literal:<computeroutput>sparse_indexing::zero_based</computeroutput> or :literal:<computeroutput>sparse_indexing::one_based</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The requested kind of USM in the returned block.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tuple of three arrays: values, column indicies, and row offsets that represent a sub-table in CSR format that contain the data from the original table corresponding to the rows from the <computeroutput>row_range</computeroutput> and with the requested indexing scheme. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="103" column="16" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="103" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a59622297e23824e243b1668805e5a8cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::tuple&lt; T *, I *, I * &gt;</type>
        <definition>std::tuple&lt; T *, I *, I * &gt; pull</definition>
        <argsstring>(array_d &amp;data, array_i &amp;column_indices, array_i &amp;row_offsets, const range &amp;row_range={ 0, -1 }, const sparse_indexing indexing=sparse_indexing::one_based) const</argsstring>
        <name>pull</name>
        <qualifiedname>oneapi::dal::v1::csr_accessor::pull</qualifiedname>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_d</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_i</ref> &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_i</ref> &amp;</type>
          <declname>row_offsets</declname>
        </param>
        <param>
          <type>const <ref refid="structoneapi_1_1dal_1_1v1_1_1range" kindref="compound">range</ref> &amp;</type>
          <declname>row_range</declname>
          <defval>{ 0, -1 }</defval>
        </param>
        <param>
          <type>const sparse_indexing</type>
          <declname>indexing</declname>
          <defval>sparse_indexing::one_based</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides access to the rows of the table in CSR format The method returns arrays that directly point to the memory within the table if it is possible. In that case, the arrays refer to the memory as immutable data. Otherwise, new memory blocks are allocated, and the data from the table rows is converted and copied into those blocks. In this case, arrays refer to the blocks as mutable data. The method updates :expr:<computeroutput>data</computeroutput>, :expr:<computeroutput>column_indices</computeroutput>, and :expr:<computeroutput>row_offsets</computeroutput> arrays.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">data</parametername>
</parameternamelist>
<parameterdescription>
<para>The block in which memory is reused (if it is possible) to obtain the values from the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">column_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The block in which memory is reused (if it is possible) to obtain the column indices from the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">row_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>The block in which memory is reused (if it is possible) to obtain the row offsets from the table. The memory of <computeroutput>data</computeroutput>, <computeroutput>column_indices</computeroutput> and <computeroutput>row_offsets</computeroutput> blocks are reset either when their size is not big enough, or when the blocks contain immutable data, or when direct memory from the table can be used. If the blocks are reset to use direct memory pointers from the object, they refer to those pointers as immutable memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">row_range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range of rows that data is returned from the accessor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indexing</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexing scheme used to access the data in the returned arrays in CSR layout. Should be :literal:<computeroutput>sparse_indexing::zero_based</computeroutput> or :literal:<computeroutput>sparse_indexing::one_based</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tuple of three pointers: values, column indicies, and row offsets that represent a sub-table in CSR format that contain the data from the original table corresponding to the rows from the <computeroutput>row_range</computeroutput> and with the requested indexing scheme. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="149" column="16" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="149" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a5dfb7e2a5f2ccfea5fbfd1545100036b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::tuple&lt; T *, I *, I * &gt;</type>
        <definition>std::tuple&lt; T *, I *, I * &gt; pull</definition>
        <argsstring>(sycl::queue &amp;queue, array_d &amp;data, array_i &amp;column_indices, array_i &amp;row_offsets, const range &amp;row_range={ 0, -1 }, const sparse_indexing indexing=sparse_indexing::one_based, const sycl::usm::alloc &amp;alloc=sycl::usm::alloc::shared) const</argsstring>
        <name>pull</name>
        <qualifiedname>oneapi::dal::v1::csr_accessor::pull</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_d</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_i</ref> &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_i</ref> &amp;</type>
          <declname>row_offsets</declname>
        </param>
        <param>
          <type>const <ref refid="structoneapi_1_1dal_1_1v1_1_1range" kindref="compound">range</ref> &amp;</type>
          <declname>row_range</declname>
          <defval>{ 0, -1 }</defval>
        </param>
        <param>
          <type>const sparse_indexing</type>
          <declname>indexing</declname>
          <defval>sparse_indexing::one_based</defval>
        </param>
        <param>
          <type>const sycl::usm::alloc &amp;</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides access to the rows of the table in CSR format The method returns arrays that directly point to the memory within the table if it is possible. In that case, the arrays refer to the memory as immutable data. Otherwise, new memory blocks are allocated, and the data from the table rows is converted and copied into those blocks. In this case, arrays refer to the blocks as mutable data. The method updates :expr:<computeroutput>data</computeroutput>, :expr:<computeroutput>column_indices</computeroutput>, and :expr:<computeroutput>row_offsets</computeroutput> arrays.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">data</parametername>
</parameternamelist>
<parameterdescription>
<para>The block in which memory is reused (if it is possible) to obtain the values from the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">column_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The block in which memory is reused (if it is possible) to obtain the column indices from the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">row_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>The block in which memory is reused (if it is possible) to obtain the row offsets from the table. The memory of <computeroutput>data</computeroutput>, <computeroutput>column_indices</computeroutput>, and <computeroutput>row_offsets</computeroutput> blocks are reset either when their size is not big enough, or when the blocks contain immutable data, or when direct memory from the table can be used. If the blocks are reset to use direct memory pointers from the object, they refer to those pointers as immutable memory blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">row_range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range of rows that data is returned from the accessor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indexing</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexing scheme used to access the data in the returned arrays in CSR layout. Should be :literal:<computeroutput>sparse_indexing::zero_based</computeroutput> or :literal:<computeroutput>sparse_indexing::one_based</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The requested kind of USM in the returned block.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tuple of three pointers: values, column indicies, and row offsets that represent a sub-table in CSR format that contain the data from the original table corresponding to the rows from the <computeroutput>row_range</computeroutput> and with the requested indexing scheme. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="193" column="16" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="193" bodyend="208"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a8f9c48930bf247ec47617d1bd04f82da" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::tuple&lt; T *, I *, I * &gt;</type>
        <definition>static std::tuple&lt; T *, I *, I * &gt; get_block_data</definition>
        <argsstring>(const array_d &amp;data, array_i &amp;column_indices, array_i &amp;row_offsets)</argsstring>
        <name>get_block_data</name>
        <qualifiedname>oneapi::dal::v1::csr_accessor::get_block_data</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_d</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_i</ref> &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array_i</ref> &amp;</type>
          <declname>row_offsets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="212" column="23" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="212" bodyend="223"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data values in blocks returned by the accessor. Should be const-qualified for read-only access. An accessor supports at least :expr:<computeroutput>float</computeroutput>, :expr:<computeroutput>double</computeroutput>, and :expr:<computeroutput>std::int32_t</computeroutput> types of :literal:<computeroutput>T</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" line="32" column="1" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr_accessor.hpp" bodystart="32" bodyend="226"/>
    <listofallmembers>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a63413f9d18c03d6f03ab979692151d51" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_accessor</scope><name>array_d</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a56911fd310363e2947072d8852d9a16b" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_accessor</scope><name>array_i</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a20577e5e4416c4471db791c86c729bfc" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_accessor</scope><name>csr_accessor</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1ab027bea168d2ecaeafcd7086740888ef" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_accessor</scope><name>data_t</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a8f9c48930bf247ec47617d1bd04f82da" prot="private" virt="non-virtual"><scope>oneapi::dal::v1::csr_accessor</scope><name>get_block_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1aa07a3395ff8de80ec7c590f0f73a8054" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_accessor</scope><name>I</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a01b5eaa93b39348c465be9a080c669af" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_accessor</scope><name>is_readonly</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1abbe0f6cf859c3dc308e450d166499569" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_accessor</scope><name>pull</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a64c297db67aec2993a992b3eb287c8f7" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_accessor</scope><name>pull</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a59622297e23824e243b1668805e5a8cf" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_accessor</scope><name>pull</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a5dfb7e2a5f2ccfea5fbfd1545100036b" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_accessor</scope><name>pull</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__accessor_1a0e976b12833ac402660dc1ab10678d5e" prot="private" virt="non-virtual"><scope>oneapi::dal::v1::csr_accessor</scope><name>pull_iface_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
