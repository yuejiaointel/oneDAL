<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceoneapi_1_1dal_1_1backend_1_1primitives" kind="namespace" language="C++">
    <compoundname>oneapi::dal::backend::primitives</compoundname>
    <innerclass refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndarray" prot="public">oneapi::dal::backend::primitives::ndarray</innerclass>
    <innerclass refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndarray__base" prot="public">oneapi::dal::backend::primitives::ndarray_base</innerclass>
    <innerclass refid="structoneapi_1_1dal_1_1backend_1_1primitives_1_1ndindexer" prot="public">oneapi::dal::backend::primitives::ndindexer</innerclass>
    <innerclass refid="structoneapi_1_1dal_1_1backend_1_1primitives_1_1ndindexer__base" prot="public">oneapi::dal::backend::primitives::ndindexer_base</innerclass>
    <innerclass refid="structoneapi_1_1dal_1_1backend_1_1primitives_1_1ndindexer__base_3_01ndorder_1_1c_00_01_index_01_4" prot="public">oneapi::dal::backend::primitives::ndindexer_base&lt; ndorder::c, Index &gt;</innerclass>
    <innerclass refid="structoneapi_1_1dal_1_1backend_1_1primitives_1_1ndindexer__base_3_01ndorder_1_1f_00_01_index_01_4" prot="public">oneapi::dal::backend::primitives::ndindexer_base&lt; ndorder::f, Index &gt;</innerclass>
    <innerclass refid="structoneapi_1_1dal_1_1backend_1_1primitives_1_1ndindexer__dkeeper" prot="public">oneapi::dal::backend::primitives::ndindexer_dkeeper</innerclass>
    <innerclass refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndshape" prot="public">oneapi::dal::backend::primitives::ndshape</innerclass>
    <innerclass refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" prot="public">oneapi::dal::backend::primitives::ndview</innerclass>
    <innerclass refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1row__block__info" prot="public">oneapi::dal::backend::primitives::row_block_info</innerclass>
    <innerclass refid="structoneapi_1_1dal_1_1backend_1_1primitives_1_1transposed__ndorder" prot="public">oneapi::dal::backend::primitives::transposed_ndorder</innerclass>
    <innerclass refid="structoneapi_1_1dal_1_1backend_1_1primitives_1_1transposed__ndorder_3_01ndorder_1_1c_01_4" prot="public">oneapi::dal::backend::primitives::transposed_ndorder&lt; ndorder::c &gt;</innerclass>
    <innerclass refid="structoneapi_1_1dal_1_1backend_1_1primitives_1_1transposed__ndorder_3_01ndorder_1_1f_01_4" prot="public">oneapi::dal::backend::primitives::transposed_ndorder&lt; ndorder::f &gt;</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="backend_2primitives_2common_8hpp_1a3d246eef3d231fdd567bf51a8d16c9b3" prot="public" static="no" strong="yes">
        <type></type>
        <name>transpose</name>
        <qualifiedname>oneapi::dal::backend::primitives::transpose</qualifiedname>
        <enumvalue id="backend_2primitives_2common_8hpp_1a3d246eef3d231fdd567bf51a8d16c9b3a340a991b42208a36b5a584f5688bba2e" prot="public">
          <name>nontrans</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="backend_2primitives_2common_8hpp_1a3d246eef3d231fdd567bf51a8d16c9b3a4738019ef434f24099319565cd5185e5" prot="public">
          <name>trans</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Specifies whether an input matrix should be transposed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/common.hpp" line="24" column="1" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/common.hpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="enum" id="ndarray_8hpp_1ad11360b18dbe1ebdd80efb58f28e5f27" prot="public" static="no" strong="yes">
        <type></type>
        <name>ndorder</name>
        <qualifiedname>oneapi::dal::backend::primitives::ndorder</qualifiedname>
        <enumvalue id="ndarray_8hpp_1ad11360b18dbe1ebdd80efb58f28e5f27a4a8a08f09d37b73795649038408b5f33" prot="public">
          <name>c</name>
          <briefdescription>
<para>C-style ordering, row-major in 2D case. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ndarray_8hpp_1ad11360b18dbe1ebdd80efb58f28e5f27a8fa14cdd754f91cc6554c9e71929cce7" prot="public">
          <name>f</name>
          <briefdescription>
<para>Fortran-style ordering, column-major in 2D case. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" line="25" column="1" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" bodystart="25" bodyend="30"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ndarray_8hpp_1a7330b209792715d4a4c94a1d07408344" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>ndorder</type>
            <declname>order</declname>
            <defname>order</defname>
          </param>
        </templateparamlist>
        <type>constexpr ndorder</type>
        <definition>constexpr ndorder transposed_ndorder_v</definition>
        <argsstring></argsstring>
        <name>transposed_ndorder_v</name>
        <qualifiedname>oneapi::dal::backend::primitives::transposed_ndorder_v</qualifiedname>
        <initializer>= <ref refid="structoneapi_1_1dal_1_1backend_1_1primitives_1_1transposed__ndorder" kindref="compound">transposed_ndorder</ref>&lt;order&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" line="46" column="19" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="distributed_8hpp_1a3a4b955f41612c01af46ab452eba922f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto get_boundary_indices</definition>
        <argsstring>(const ndview&lt; std::int64_t, 1 &gt; &amp;sample_counts, std::int64_t block_size)</argsstring>
        <name>get_boundary_indices</name>
        <qualifiedname>oneapi::dal::backend::primitives::get_boundary_indices</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; std::int64_t, 1 &gt; &amp;</type>
          <declname>sample_counts</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>block_size</declname>
        </param>
        <briefdescription>
<para>Computes boundaries/offsets for blocks on different ranks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sample_counts</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of samples on each device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of samples in one block </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple of node numbers and corresponding offsets </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/distributed.hpp" line="31" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/distributed.hpp" bodystart="31" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="element__wise_8hpp_1a9d625acd3a980defc54731a2e99739fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
          <param>
            <type>typename Input1Type</type>
          </param>
          <param>
            <type>typename Input2Type</type>
          </param>
          <param>
            <type>typename OutputType</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>input1_layout</declname>
            <defname>input1_layout</defname>
          </param>
          <param>
            <type>ndorder</type>
            <declname>input2_layout</declname>
            <defname>input2_layout</defname>
          </param>
          <param>
            <type>ndorder</type>
            <declname>output_layout</declname>
            <defname>output_layout</defname>
          </param>
        </templateparamlist>
        <type>sycl::event</type>
        <definition>sycl::event element_wise</definition>
        <argsstring>(sycl::queue &amp;queue, const Functor &amp;functor, const ndview&lt; Input1Type, 2, input1_layout &gt; &amp;input1, const ndview&lt; Input2Type, 2, input2_layout &gt; &amp;input2, ndview&lt; OutputType, 2, output_layout &gt; &amp;output, const event_vector &amp;deps={})</argsstring>
        <name>element_wise</name>
        <qualifiedname>oneapi::dal::backend::primitives::element_wise</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const Functor &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; Input1Type, 2, input1_layout &gt; &amp;</type>
          <declname>input1</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; Input2Type, 2, input2_layout &gt; &amp;</type>
          <declname>input2</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; OutputType, 2, output_layout &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const event_vector &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/element_wise.hpp" line="32" column="20" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/element_wise.hpp" bodystart="32" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="element__wise_8hpp_1a798447ad0edfc2a94011c96105e79e3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
          <param>
            <type>typename Input1Type</type>
          </param>
          <param>
            <type>typename Input2Type</type>
          </param>
          <param>
            <type>typename OutputType</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>input1_layout</declname>
            <defname>input1_layout</defname>
          </param>
          <param>
            <type>ndorder</type>
            <declname>input2_layout</declname>
            <defname>input2_layout</defname>
          </param>
          <param>
            <type>ndorder</type>
            <declname>output_layout</declname>
            <defname>output_layout</defname>
          </param>
        </templateparamlist>
        <type>sycl::event</type>
        <definition>sycl::event element_wise</definition>
        <argsstring>(sycl::queue &amp;queue, const Functor &amp;functor, const ndview&lt; Input1Type, 1, input1_layout &gt; &amp;input1, const ndview&lt; Input2Type, 1, input2_layout &gt; &amp;input2, ndview&lt; OutputType, 1, output_layout &gt; &amp;output, const event_vector &amp;deps={})</argsstring>
        <name>element_wise</name>
        <qualifiedname>oneapi::dal::backend::primitives::element_wise</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const Functor &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; Input1Type, 1, input1_layout &gt; &amp;</type>
          <declname>input1</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; Input2Type, 1, input2_layout &gt; &amp;</type>
          <declname>input2</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; OutputType, 1, output_layout &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const event_vector &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/element_wise.hpp" line="65" column="20" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/element_wise.hpp" bodystart="65" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="element__wise_8hpp_1a1f4d98e4c8031660e7680ed14adc204c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
          <param>
            <type>typename Input1Type</type>
          </param>
          <param>
            <type>typename Input2Type</type>
          </param>
          <param>
            <type>typename OutputType</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>input1_layout</declname>
            <defname>input1_layout</defname>
          </param>
          <param>
            <type>ndorder</type>
            <declname>output_layout</declname>
            <defname>output_layout</defname>
          </param>
        </templateparamlist>
        <type>sycl::event</type>
        <definition>sycl::event element_wise</definition>
        <argsstring>(sycl::queue &amp;queue, const Functor &amp;functor, const ndview&lt; Input1Type, 2, input1_layout &gt; &amp;input1, const ndview&lt; Input2Type, 1 &gt; &amp;input2, ndview&lt; OutputType, 2, output_layout &gt; &amp;output, const event_vector &amp;deps={})</argsstring>
        <name>element_wise</name>
        <qualifiedname>oneapi::dal::backend::primitives::element_wise</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const Functor &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; Input1Type, 2, input1_layout &gt; &amp;</type>
          <declname>input1</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; Input2Type, 1 &gt; &amp;</type>
          <declname>input2</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; OutputType, 2, output_layout &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const event_vector &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/element_wise.hpp" line="87" column="20" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/element_wise.hpp" bodystart="87" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="element__wise_8hpp_1ad3a104a3a919d7290c53a2938ec40bca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
          <param>
            <type>typename Input1Type</type>
          </param>
          <param>
            <type>typename Input2Type</type>
          </param>
          <param>
            <type>typename OutputType</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>input_layout</declname>
            <defname>input_layout</defname>
          </param>
          <param>
            <type>ndorder</type>
            <declname>output_layout</declname>
            <defname>output_layout</defname>
          </param>
        </templateparamlist>
        <type>sycl::event</type>
        <definition>sycl::event element_wise</definition>
        <argsstring>(sycl::queue &amp;queue, const Functor &amp;functor, const ndview&lt; Input1Type, 2, input_layout &gt; &amp;input, const Input2Type &amp;argument, ndview&lt; OutputType, 2, output_layout &gt; &amp;output, const event_vector &amp;deps={})</argsstring>
        <name>element_wise</name>
        <qualifiedname>oneapi::dal::backend::primitives::element_wise</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const Functor &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; Input1Type, 2, input_layout &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const Input2Type &amp;</type>
          <declname>argument</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; OutputType, 2, output_layout &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const event_vector &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/element_wise.hpp" line="121" column="20" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/element_wise.hpp" bodystart="121" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="element__wise_8hpp_1ae40a6a28041cb074e971136fc0f05461" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
          <param>
            <type>typename Input1Type</type>
          </param>
          <param>
            <type>typename Input2Type</type>
          </param>
          <param>
            <type>typename OutputType</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>input_layout</declname>
            <defname>input_layout</defname>
          </param>
          <param>
            <type>ndorder</type>
            <declname>output_layout</declname>
            <defname>output_layout</defname>
          </param>
        </templateparamlist>
        <type>sycl::event</type>
        <definition>sycl::event element_wise</definition>
        <argsstring>(sycl::queue &amp;queue, const Functor &amp;functor, const ndview&lt; Input1Type, 1, input_layout &gt; &amp;input, const Input2Type &amp;argument, ndview&lt; OutputType, 1, output_layout &gt; &amp;output, const event_vector &amp;deps={})</argsstring>
        <name>element_wise</name>
        <qualifiedname>oneapi::dal::backend::primitives::element_wise</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const Functor &amp;</type>
          <declname>functor</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; Input1Type, 1, input_layout &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const Input2Type &amp;</type>
          <declname>argument</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; OutputType, 1, output_layout &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const event_vector &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/element_wise.hpp" line="150" column="20" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/element_wise.hpp" bodystart="150" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="backend_2primitives_2loops_8hpp_1abc1410d69480ddb09a713e25a51384b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Body</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void for_each_block</definition>
        <argsstring>(const ndview&lt; T, 2 &gt; &amp;data, std::int64_t block_max_row_count, Body &amp;&amp;body)</argsstring>
        <name>for_each_block</name>
        <qualifiedname>oneapi::dal::backend::primitives::for_each_block</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>block_max_row_count</declname>
        </param>
        <param>
          <type>Body &amp;&amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function that simplifies looping over the blocked data. See detailed description below. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/loops.hpp" line="78" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/loops.hpp" bodystart="78" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="backend_2primitives_2loops_8hpp_1a38645480f7156f5df65a09eacd1b9e06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Body</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void for_each_block</definition>
        <argsstring>(std::int64_t row_count, std::int64_t column_count, std::int64_t block_max_row_count, Body &amp;&amp;body)</argsstring>
        <name>for_each_block</name>
        <qualifiedname>oneapi::dal::backend::primitives::for_each_block</qualifiedname>
        <param>
          <type>std::int64_t</type>
          <declname>row_count</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>column_count</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>block_max_row_count</declname>
        </param>
        <param>
          <type>Body &amp;&amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function that simplifies looping over the blocked data. See detailed description below. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/loops.hpp" line="93" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/loops.hpp" bodystart="93" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="backend_2primitives_2loops_8hpp_1a02fdd131b09dc4070e27f8ea4bc5e2aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Body</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void for_each_block</definition>
        <argsstring>(const table &amp;data, std::int64_t block_max_row_count, Body &amp;&amp;body)</argsstring>
        <name>for_each_block</name>
        <qualifiedname>oneapi::dal::backend::primitives::for_each_block</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>block_max_row_count</declname>
        </param>
        <param>
          <type>Body &amp;&amp;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function that simplifies looping over the blocked data</para>
<para>Example of recommended usage: <programlisting><codeline><highlight class="normal"><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array&lt;T&gt;</ref><sp/>block_flat;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>acc<sp/>=<sp/><ref refid="classoneapi_1_1dal_1_1v1_1_1row__accessor" kindref="compound">row_accessor&lt;const T&gt;</ref>{<sp/>x<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>block_row_count<sp/>=<sp/>2048;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">for_each_block(x,<sp/>block_row_count,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>row_block_info&amp;<sp/>bi)<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>block_ptr<sp/>=<sp/>acc.pull(queue,<sp/>block_flat,<sp/>bi.get_range());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>block<sp/>=<sp/><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview_1afe9556154b3e69353c11fac042ac060f" kindref="member">ndview&lt;T, 2&gt;::wrap</ref>(block_ptr,<sp/>bi.get_shape());</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Body</parametername>
</parameternamelist>
<parameterdescription>
<para>The user&apos;s block handler, must be a functor that accepts <computeroutput><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1row__block__info" kindref="compound">row_block_info</ref></computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data needs to be blocked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block_max_row_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximal row count in each block. <computeroutput>body</computeroutput> is not guarantied to be called with the provided <computeroutput>block_max_row_count</computeroutput>. The &quot;tail&quot; block (if data row count is not mutiple of <computeroutput>block_max_row_count</computeroutput>) always contains less rows. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>body</parametername>
</parameternamelist>
<parameterdescription>
<para>The user-provided lambda </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/loops.hpp" line="139" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/loops.hpp" bodystart="139" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="ndarray_8hpp_1a47166b9e777c6821a3072c5cd1fffc6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>ord1</declname>
            <defname>ord1</defname>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>ord2</declname>
            <defname>ord2</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void copy</definition>
        <argsstring>(ndview&lt; T1, 2, ord1 &gt; &amp;dst, const ndview&lt; T2, 2, ord2 &gt; &amp;src)</argsstring>
        <name>copy</name>
        <qualifiedname>oneapi::dal::backend::primitives::copy</qualifiedname>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; T1, 2, ord1 &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; T2, 2, ord2 &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" line="601" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" bodystart="601" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="ndarray_8hpp_1a351af2681d176988da9ab8361dc91625" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>ord1</declname>
            <defname>ord1</defname>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>ord2</declname>
            <defname>ord2</defname>
          </param>
        </templateparamlist>
        <type>sycl::event</type>
        <definition>sycl::event copy</definition>
        <argsstring>(sycl::queue &amp;q, ndview&lt; T1, 2, ord1 &gt; &amp;dst, const ndview&lt; T2, 2, ord2 &gt; &amp;src, const event_vector &amp;deps={})</argsstring>
        <name>copy</name>
        <qualifiedname>oneapi::dal::backend::primitives::copy</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; T1, 2, ord1 &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; T2, 2, ord2 &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const event_vector &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" line="633" column="20" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" bodystart="633" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="ndarray_8hpp_1a39e0adb65b5ca096e04a9c7768c08fec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>ord1</declname>
            <defname>ord1</defname>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>ord2</declname>
            <defname>ord2</defname>
          </param>
        </templateparamlist>
        <type>sycl::event</type>
        <definition>sycl::event copy</definition>
        <argsstring>(sycl::queue &amp;q, ndview&lt; T1, 1, ord1 &gt; &amp;dst, const ndview&lt; T2, 1, ord2 &gt; &amp;src, const event_vector &amp;deps={})</argsstring>
        <name>copy</name>
        <qualifiedname>oneapi::dal::backend::primitives::copy</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; T1, 1, ord1 &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; T2, 1, ord2 &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const event_vector &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" line="670" column="20" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" bodystart="670" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="ndarray_8hpp_1ac1f8e1f80f601830ff99a46540f1a31d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>sycl::event</type>
        <definition>sycl::event fill</definition>
        <argsstring>(sycl::queue &amp;q, ndview&lt; T, 1 &gt; &amp;dst, const T &amp;value=T{}, const event_vector &amp;deps={})</argsstring>
        <name>fill</name>
        <qualifiedname>oneapi::dal::backend::primitives::fill</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; T, 1 &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
          <defval>T{}</defval>
        </param>
        <param>
          <type>const event_vector &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" line="681" column="20" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" bodystart="681" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="ndarray_8hpp_1a14fb78b15d94e7421fcdbfe623e1e95c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>ord1</declname>
            <defname>ord1</defname>
          </param>
        </templateparamlist>
        <type>sycl::event</type>
        <definition>sycl::event fill</definition>
        <argsstring>(sycl::queue &amp;q, ndview&lt; T, 2, ord1 &gt; &amp;dst, const T &amp;value=T{}, const event_vector &amp;deps={})</argsstring>
        <name>fill</name>
        <qualifiedname>oneapi::dal::backend::primitives::fill</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; T, 2, ord1 &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
          <defval>T{}</defval>
        </param>
        <param>
          <type>const event_vector &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" line="693" column="20" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" bodystart="693" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="ndarray_8hpp_1ac8b955179b878af07fe0b35f1fcd9e82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ndorder</type>
            <declname>yorder</declname>
            <defname>yorder</defname>
          </param>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>xorder</declname>
            <defname>xorder</defname>
          </param>
          <param>
            <type>sycl::usm::alloc</type>
            <declname>alloc</declname>
            <defname>alloc</defname>
            <defval>sycl::usm::alloc::device</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto copy</definition>
        <argsstring>(sycl::queue &amp;q, const ndview&lt; Type, 2, xorder &gt; &amp;src, const event_vector &amp;deps={})</argsstring>
        <name>copy</name>
        <qualifiedname>oneapi::dal::backend::primitives::copy</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; Type, 2, xorder &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const event_vector &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" line="1369" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" bodystart="1369" bodyend="1377"/>
      </memberdef>
      <memberdef kind="function" id="ndarray_8hpp_1acd612392954713a551ff7e141ed37553" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>xorder</declname>
            <defname>xorder</defname>
          </param>
          <param>
            <type>sycl::usm::alloc</type>
            <declname>alloc</declname>
            <defname>alloc</defname>
            <defval>sycl::usm::alloc::device</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto copy</definition>
        <argsstring>(sycl::queue &amp;q, const ndview&lt; Type, 2, xorder &gt; &amp;src, const event_vector &amp;deps={})</argsstring>
        <name>copy</name>
        <qualifiedname>oneapi::dal::backend::primitives::copy</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; Type, 2, xorder &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const event_vector &amp;</type>
          <declname>deps</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" line="1380" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndarray.hpp" bodystart="1380" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="ndindexer_8hpp_1a184d89e0e85712c0dc21248f073815b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>order</declname>
            <defname>order</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto make_ndindexer</definition>
        <argsstring>(const ndview&lt; Type, 2, order &gt; &amp;view)</argsstring>
        <name>make_ndindexer</name>
        <qualifiedname>oneapi::dal::backend::primitives::make_ndindexer</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndview" kindref="compound">ndview</ref>&lt; Type, 2, order &gt; &amp;</type>
          <declname>view</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndindexer.hpp" line="115" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/ndindexer.hpp" bodystart="115" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="split__table_8hpp_1a345e9608fb6260dd6450ad9ddf5fbe83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>order</declname>
            <defname>order</defname>
            <defval>ndorder::c</defval>
          </param>
          <param>
            <type>typename Container</type>
            <defval>std::deque&lt;ndarray&lt;T, 2, order&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>auto &amp; split_table_inplace</definition>
        <argsstring>(const table &amp;input, std::int64_t block, Container &amp;container, T default_value=std::numeric_limits&lt; T &gt;::max())</argsstring>
        <name>split_table_inplace</name>
        <qualifiedname>oneapi::dal::backend::primitives::split_table_inplace</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>block</declname>
        </param>
        <param>
          <type>Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>T</type>
          <declname>default_value</declname>
          <defval>std::numeric_limits&lt; T &gt;::max()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/split_table.hpp" line="32" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/split_table.hpp" bodystart="32" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="split__table_8hpp_1a85b17345710bb52084e05e36834a2f7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>order</declname>
            <defname>order</defname>
            <defval>ndorder::c</defval>
          </param>
          <param>
            <type>typename Container</type>
            <defval>std::deque&lt;ndarray&lt;T, 2, order&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto split_table</definition>
        <argsstring>(const table &amp;input, std::int64_t block, T default_value=std::numeric_limits&lt; T &gt;::max())</argsstring>
        <name>split_table</name>
        <qualifiedname>oneapi::dal::backend::primitives::split_table</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>block</declname>
        </param>
        <param>
          <type>T</type>
          <declname>default_value</declname>
          <defval>std::numeric_limits&lt; T &gt;::max()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/split_table.hpp" line="69" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/split_table.hpp" bodystart="69" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="split__table_8hpp_1a78f8f478a7b1dbf93eb40186ec23f295" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>order</declname>
            <defname>order</defname>
            <defval>ndorder::c</defval>
          </param>
          <param>
            <type>typename Container</type>
            <defval>std::deque&lt;ndarray&lt;T, 2, order&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>auto &amp; split_table_inplace</definition>
        <argsstring>(sycl::queue &amp;queue, const table &amp;input, std::int64_t block, Container &amp;container, T default_value=std::numeric_limits&lt; T &gt;::max(), sycl::usm::alloc kind=sycl::usm::alloc::device)</argsstring>
        <name>split_table_inplace</name>
        <qualifiedname>oneapi::dal::backend::primitives::split_table_inplace</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>block</declname>
        </param>
        <param>
          <type>Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>T</type>
          <declname>default_value</declname>
          <defval>std::numeric_limits&lt; T &gt;::max()</defval>
        </param>
        <param>
          <type>sycl::usm::alloc</type>
          <declname>kind</declname>
          <defval>sycl::usm::alloc::device</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/split_table.hpp" line="82" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/split_table.hpp" bodystart="82" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="split__table_8hpp_1a6438550eb1f8c5377236767738ec0eb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>order</declname>
            <defname>order</defname>
            <defval>ndorder::c</defval>
          </param>
          <param>
            <type>typename Container</type>
            <defval>std::deque&lt;ndarray&lt;T, 2, order&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto split_table</definition>
        <argsstring>(sycl::queue &amp;queue, const table &amp;input, std::int64_t block, T default_value=std::numeric_limits&lt; T &gt;::max(), sycl::usm::alloc kind=sycl::usm::alloc::device)</argsstring>
        <name>split_table</name>
        <qualifiedname>oneapi::dal::backend::primitives::split_table</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>block</declname>
        </param>
        <param>
          <type>T</type>
          <declname>default_value</declname>
          <defval>std::numeric_limits&lt; T &gt;::max()</defval>
        </param>
        <param>
          <type>sycl::usm::alloc</type>
          <declname>kind</declname>
          <defval>sycl::usm::alloc::device</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/split_table.hpp" line="125" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/split_table.hpp" bodystart="125" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1aa5805338598a5f4ac161b41bf0d4d60c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndarray" kindref="compound">ndarray</ref>&lt; Type, 2 &gt;</type>
        <definition>ndarray&lt; Type, 2 &gt; table2ndarray</definition>
        <argsstring>(const table &amp;table)</argsstring>
        <name>table2ndarray</name>
        <qualifiedname>oneapi::dal::backend::primitives::table2ndarray</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a table to a 2D ndarray</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the memory block elements within the ndarray.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Input table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new 2D ndarray instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" line="36" column="16" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" bodystart="36" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a9ce141ec09f746ae468058abc4f1e51b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndarray" kindref="compound">ndarray</ref>&lt; Type, 1 &gt;</type>
        <definition>ndarray&lt; Type, 1 &gt; table2ndarray_1d</definition>
        <argsstring>(const table &amp;table)</argsstring>
        <name>table2ndarray_1d</name>
        <qualifiedname>oneapi::dal::backend::primitives::table2ndarray_1d</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a table to a 1D ndarray</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the memory block elements within the ndarray.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Input table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new 1D ndarray instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" line="50" column="16" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" bodystart="50" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1ae12c5ff31a7e325f59a5f3303c0efbe7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndarray" kindref="compound">ndarray</ref>&lt; Type, 2, ndorder::c &gt;</type>
        <definition>ndarray&lt; Type, 2, ndorder::c &gt; table2ndarray_rm</definition>
        <argsstring>(sycl::queue &amp;q, const table &amp;table, sycl::usm::alloc alloc)</argsstring>
        <name>table2ndarray_rm</name>
        <qualifiedname>oneapi::dal::backend::primitives::table2ndarray_rm</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>sycl::usm::alloc</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a table to a 2D ndarray with row-major data order.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the memory block elements within the ndarray.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Input table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The USM allocation type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new 2D ndarray instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" line="67" column="16" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" bodystart="67" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a6fe6b84e62e600e84ef834ef6ed6599d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndarray" kindref="compound">ndarray</ref>&lt; Type, 2, ndorder::f &gt;</type>
        <definition>ndarray&lt; Type, 2, ndorder::f &gt; homogen_table2ndarray_cm</definition>
        <argsstring>(sycl::queue &amp;q, const table &amp;table, sycl::usm::alloc alloc)</argsstring>
        <name>homogen_table2ndarray_cm</name>
        <qualifiedname>oneapi::dal::backend::primitives::homogen_table2ndarray_cm</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>sycl::usm::alloc</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a homogeneous table to a 2D ndarray with column-major data order.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the memory block elements within the ndarray.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Input table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The USM allocation type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new 2D ndarray instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" line="87" column="16" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" bodystart="87" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1ad8258e81ed94fb01fa8f3bdb10659ef5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndarray" kindref="compound">ndarray</ref>&lt; Type, 2, ndorder::f &gt;</type>
        <definition>ndarray&lt; Type, 2, ndorder::f &gt; table2ndarray_cm</definition>
        <argsstring>(sycl::queue &amp;q, const table &amp;table, sycl::usm::alloc alloc)</argsstring>
        <name>table2ndarray_cm</name>
        <qualifiedname>oneapi::dal::backend::primitives::table2ndarray_cm</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>sycl::usm::alloc</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a table to a 2D ndarray with column-major data order.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the memory block elements within the ndarray.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Input table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The USM allocation type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new 2D ndarray instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" line="136" column="16" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" bodystart="136" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a67498db75224e33e65c6e785ab7ca115" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>ndorder</type>
            <declname>order</declname>
            <defname>order</defname>
            <defval>ndorder::c</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndarray" kindref="compound">ndarray</ref>&lt; Type, 2, order &gt;</type>
        <definition>ndarray&lt; Type, 2, order &gt; table2ndarray</definition>
        <argsstring>(sycl::queue &amp;q, const table &amp;table, sycl::usm::alloc alloc=sycl::usm::alloc::shared)</argsstring>
        <name>table2ndarray</name>
        <qualifiedname>oneapi::dal::backend::primitives::table2ndarray</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>sycl::usm::alloc</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a table to a 2D ndarray</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the memory block elements within the ndarray. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>The order of the ndarray.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Input table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The USM allocation type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new 2D ndarray instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" line="170" column="16" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" bodystart="170" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a5f2290cdb8364fad153c43bf2c9d5607" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto table2ndarray_variant</definition>
        <argsstring>(sycl::queue &amp;q, const table &amp;table, sycl::usm::alloc alloc)</argsstring>
        <name>table2ndarray_variant</name>
        <qualifiedname>oneapi::dal::backend::primitives::table2ndarray_variant</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>sycl::usm::alloc</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a table to a 2D ndarray with the data order determined by the table layout.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the memory block elements within the ndarray.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Input table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The USM allocation type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new 2D ndarray instance. If the table layout is row-major, the ndarray will have row-major data order. If the table layout is column-major, the ndarray will have column-major data order. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" line="196" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" bodystart="196" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1adb6eda9109eb13336add592094d1ee5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1backend_1_1primitives_1_1ndarray" kindref="compound">ndarray</ref>&lt; Type, 1 &gt;</type>
        <definition>ndarray&lt; Type, 1 &gt; table2ndarray_1d</definition>
        <argsstring>(sycl::queue &amp;q, const table &amp;table, sycl::usm::alloc alloc=sycl::usm::alloc::shared)</argsstring>
        <name>table2ndarray_1d</name>
        <qualifiedname>oneapi::dal::backend::primitives::table2ndarray_1d</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>sycl::usm::alloc</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a table to a 1D ndarray</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the memory block elements within the ndarray.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Input table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The USM allocation type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new 1D ndarray instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" line="221" column="16" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/utils.hpp" bodystart="221" bodyend="227"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/backend/primitives/common.hpp" line="21" column="1"/>
  </compounddef>
</doxygen>
