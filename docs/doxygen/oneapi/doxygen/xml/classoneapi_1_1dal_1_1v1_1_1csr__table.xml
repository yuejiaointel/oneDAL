<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classoneapi_1_1dal_1_1v1_1_1csr__table" kind="class" language="C++" prot="public">
    <compoundname>oneapi::dal::v1::csr_table</compoundname>
    <basecompoundref refid="classoneapi_1_1dal_1_1v1_1_1table" prot="public" virt="non-virtual">table</basecompoundref>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a9ab6fb97fb3e9768781054d12edbaec5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int64_t</type>
        <definition>static std::int64_t kind</definition>
        <argsstring>()</argsstring>
        <name>kind</name>
        <qualifiedname>oneapi::dal::v1::csr_table::kind</qualifiedname>
        <briefdescription>
<para>Returns the unique id of <computeroutput><ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table" kindref="compound">csr_table</ref></computeroutput> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="30" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a546d2730c384f73ed46e519e4e5f8535" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Data</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table" kindref="compound">csr_table</ref></type>
        <definition>static csr_table wrap</definition>
        <argsstring>(const Data *data_pointer, const std::int64_t *column_indices_pointer, const std::int64_t *row_offsets_pointer, std::int64_t row_count, std::int64_t column_count, sparse_indexing indexing=sparse_indexing::one_based)</argsstring>
        <name>wrap</name>
        <qualifiedname>oneapi::dal::v1::csr_table::wrap</qualifiedname>
        <param>
          <type>const Data *</type>
          <declname>data_pointer</declname>
        </param>
        <param>
          <type>const std::int64_t *</type>
          <declname>column_indices_pointer</declname>
        </param>
        <param>
          <type>const std::int64_t *</type>
          <declname>row_offsets_pointer</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>row_count</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>column_count</declname>
        </param>
        <param>
          <type>sparse_indexing</type>
          <declname>indexing</declname>
          <defval>sparse_indexing::one_based</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <computeroutput><ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table" kindref="compound">csr_table</ref></computeroutput> instance from externally-defined data, columns indices and row offsets memory blocks. Table object refers to the memory blocks but does not own them. The responsibility to free the memory blocks remains on the user side. The :literal:<computeroutput>data</computeroutput> should point to the <computeroutput>data_pointer</computeroutput> memory block. The :literal:<computeroutput>columns_indices</computeroutput> should point to the <computeroutput>column_indices_pointer</computeroutput> memory block. The :literal:<computeroutput>row_offsets</computeroutput> should point to the <computeroutput>row_offsets_pointer</computeroutput> memory block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the data block that will be stored into the table. The table initializes data types of metadata with this data type. The feature types should be set to default values for :literal:<computeroutput>Data</computeroutput> type: contiguous for floating-point, ordinal for integer types. The :literal:<computeroutput>Data</computeroutput> type should be at least :expr:<computeroutput>float</computeroutput>, :expr:<computeroutput>double</computeroutput> or :expr:<computeroutput>std::int32_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to values block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_indices_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to column indices block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_offsets_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to row offsets block in CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows in the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns in the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexing</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexing scheme used to access data in the CSR layout. Should be :literal:<computeroutput>sparse_indexing::zero_based</computeroutput> or :literal:<computeroutput>sparse_indexing::one_based</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="55" column="22" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" bodystart="55" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a70f10ef100dd876b9ba32cf6c1ce85c0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Data</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table" kindref="compound">csr_table</ref></type>
        <definition>static csr_table wrap</definition>
        <argsstring>(sycl::queue &amp;queue, const Data *data_pointer, const std::int64_t *column_indices_pointer, const std::int64_t *row_offsets_pointer, std::int64_t row_count, std::int64_t column_count, sparse_indexing indexing=sparse_indexing::one_based, const std::vector&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>wrap</name>
        <qualifiedname>oneapi::dal::v1::csr_table::wrap</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const Data *</type>
          <declname>data_pointer</declname>
        </param>
        <param>
          <type>const std::int64_t *</type>
          <declname>column_indices_pointer</declname>
        </param>
        <param>
          <type>const std::int64_t *</type>
          <declname>row_offsets_pointer</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>row_count</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>column_count</declname>
        </param>
        <param>
          <type>sparse_indexing</type>
          <declname>indexing</declname>
          <defval>sparse_indexing::one_based</defval>
        </param>
        <param>
          <type>const std::vector&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <computeroutput><ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table" kindref="compound">csr_table</ref></computeroutput> instance from externally-defined data, columns indices and row offsets memory blocks. Table object refers to the memory blocks but does not own them. The responsibility to free the memory blocks remains on the user side. The :literal:<computeroutput>data</computeroutput> should point to the <computeroutput>data_pointer</computeroutput> memory block. The :literal:<computeroutput>columns_indices</computeroutput> should point to the <computeroutput>column_indices_pointer</computeroutput> memory block. The :literal:<computeroutput>row_offsets</computeroutput> should point to the <computeroutput>row_offsets_pointer</computeroutput> memory block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the data block that will be stored into the table. The table initializes data types of metadata with this data type. The feature types should be set to default values for :literal:<computeroutput>Data</computeroutput> type: contiguous for floating-point, ordinal for integer types. The :literal:<computeroutput>Data</computeroutput> type should be at least :expr:<computeroutput>float</computeroutput>, :expr:<computeroutput>double</computeroutput> or :expr:<computeroutput>std::int32_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to values block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_indices_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to column indices block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_offsets_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to row offsets block in CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows in the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns in the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexing</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexing scheme used to access data in the CSR layout. Should be :literal:<computeroutput>sparse_indexing::zero_based</computeroutput> or :literal:<computeroutput>sparse_indexing::one_based</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events indicating availability of the :literal:<computeroutput>data</computeroutput>, :literal:<computeroutput>columns_indices</computeroutput> and :literal:<computeroutput>row_offsets</computeroutput> for reading or writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="100" column="22" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" bodystart="100" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a4e152ea10559197d33d02ff2f7d4d305" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Data</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table" kindref="compound">csr_table</ref></type>
        <definition>static csr_table wrap</definition>
        <argsstring>(const dal::array&lt; Data &gt; &amp;data, const dal::array&lt; std::int64_t &gt; &amp;column_indices, const dal::array&lt; std::int64_t &gt; &amp;row_offsets, std::int64_t column_count, sparse_indexing indexing=sparse_indexing::one_based)</argsstring>
        <name>wrap</name>
        <qualifiedname>oneapi::dal::v1::csr_table::wrap</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; Data &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; std::int64_t &gt; &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; std::int64_t &gt; &amp;</type>
          <declname>row_offsets</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>column_count</declname>
        </param>
        <param>
          <type>sparse_indexing</type>
          <declname>indexing</declname>
          <defval>sparse_indexing::one_based</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <computeroutput><ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table" kindref="compound">csr_table</ref></computeroutput> instance from arrays of data, column indices and row offsets. The created table shares data ownership with the given arrays.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the data block that will be stored into the table. The table initializes data types of metadata with this data type. The feature types should be set to default values for :literal:<computeroutput>Data</computeroutput> type: contiguous for floating-point, ordinal for integer types. The :literal:<computeroutput>Data</computeroutput> type should be at least :expr:<computeroutput>float</computeroutput>, :expr:<computeroutput>double</computeroutput> or :expr:<computeroutput>std::int32_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The array that stores values block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The array that stores column indices block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>The array that stores row offsets block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns in the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexing</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexing scheme used to access data in the CSR layout. Should be :literal:<computeroutput>sparse_indexing::zero_based</computeroutput> or :literal:<computeroutput>sparse_indexing::one_based</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="333" column="22" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" bodystart="333" bodyend="339"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1ad7d7456f622f6b10d08238b9b348ab9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>csr_table</definition>
        <argsstring>()</argsstring>
        <name>csr_table</name>
        <qualifiedname>oneapi::dal::v1::csr_table::csr_table</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <computeroutput><ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table" kindref="compound">csr_table</ref></computeroutput> instance with zero number of rows and columns. The :expr:<computeroutput>kind</computeroutput> is set to<computeroutput><ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a9ab6fb97fb3e9768781054d12edbaec5" kindref="member">csr_table::kind()</ref></computeroutput>. All the properties should be set to default values (see the Properties section). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="125" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a2b536e8e9b04143db1a61b4e667f5161" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>csr_table</definition>
        <argsstring>(const table &amp;other)</argsstring>
        <name>csr_table</name>
        <qualifiedname>oneapi::dal::v1::csr_table::csr_table</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v1_1_1table" kindref="compound">table</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Casts an object of the base table type to a CSR table. If cast is not possible, the operation is equivalent to a default constructor call. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="129" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a34a49aab99ca19a1ebdbea4b3345fef4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Data</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>csr_table</definition>
        <argsstring>(const dal::array&lt; Data &gt; &amp;data, const dal::array&lt; std::int64_t &gt; &amp;column_indices, const dal::array&lt; std::int64_t &gt; &amp;row_offsets, std::int64_t column_count, sparse_indexing indexing=sparse_indexing::one_based)</argsstring>
        <name>csr_table</name>
        <qualifiedname>oneapi::dal::v1::csr_table::csr_table</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; Data &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; std::int64_t &gt; &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; std::int64_t &gt; &amp;</type>
          <declname>row_offsets</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>column_count</declname>
        </param>
        <param>
          <type>sparse_indexing</type>
          <declname>indexing</declname>
          <defval>sparse_indexing::one_based</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <computeroutput><ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table" kindref="compound">csr_table</ref></computeroutput> instance from externally-defined data blocks. Table object owns the data, row indices and column indices pointers.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the data block that will be stored into the table. The :literal:<computeroutput>Data</computeroutput> type should be at least :expr:<computeroutput>float</computeroutput>, :expr:<computeroutput>double</computeroutput> or :expr:<computeroutput>std::int32_t</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of values in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of column indices in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of row offsets in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns in the corresponding dense table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexing</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexing scheme used to access data in the CSR layout. Should be :literal:<computeroutput>sparse_indexing::zero_based</computeroutput> or :literal:<computeroutput>sparse_indexing::one_based</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="145" column="5" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" bodystart="145" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a3eb4de3c6ed770ee44b372ce2dcf56f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Data</type>
          </param>
          <param>
            <type>typename ConstDataDeleter</type>
          </param>
          <param>
            <type>typename ConstColumnIndicesDeleter</type>
          </param>
          <param>
            <type>typename ConstRowOffsetsDeleter</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>csr_table</definition>
        <argsstring>(const Data *data_pointer, const std::int64_t *column_indices_pointer, const std::int64_t *row_offsets_pointer, std::int64_t row_count, std::int64_t column_count, ConstDataDeleter &amp;&amp;data_deleter, ConstColumnIndicesDeleter &amp;&amp;column_indices_deleter, ConstRowOffsetsDeleter &amp;&amp;row_offsets_deleter, sparse_indexing indexing=sparse_indexing::one_based)</argsstring>
        <name>csr_table</name>
        <qualifiedname>oneapi::dal::v1::csr_table::csr_table</qualifiedname>
        <param>
          <type>const Data *</type>
          <declname>data_pointer</declname>
        </param>
        <param>
          <type>const std::int64_t *</type>
          <declname>column_indices_pointer</declname>
        </param>
        <param>
          <type>const std::int64_t *</type>
          <declname>row_offsets_pointer</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>row_count</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>column_count</declname>
        </param>
        <param>
          <type>ConstDataDeleter &amp;&amp;</type>
          <declname>data_deleter</declname>
        </param>
        <param>
          <type>ConstColumnIndicesDeleter &amp;&amp;</type>
          <declname>column_indices_deleter</declname>
        </param>
        <param>
          <type>ConstRowOffsetsDeleter &amp;&amp;</type>
          <declname>row_offsets_deleter</declname>
        </param>
        <param>
          <type>sparse_indexing</type>
          <declname>indexing</declname>
          <defval>sparse_indexing::one_based</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <computeroutput><ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table" kindref="compound">csr_table</ref></computeroutput> instance from externally-defined data blocks. Table object owns the data, column indices and row offsets pointers. The :literal:<computeroutput>data</computeroutput> should point to the <computeroutput>data_pointer</computeroutput> memory block. The :literal:<computeroutput>column_indices</computeroutput> should point to the <computeroutput>column_indices_pointer</computeroutput> memory block. The :literal:<computeroutput>row_offsets</computeroutput> should point to the <computeroutput>row_offsets_pointer</computeroutput> memory block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the data block that will be stored into the table. The :literal:<computeroutput>Data</computeroutput> type should be at least :expr:<computeroutput>float</computeroutput>, :expr:<computeroutput>double</computeroutput> or :expr:<computeroutput>std::int32_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConstDataDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter called on <computeroutput>data_pointer</computeroutput> when the last table that refers it is out of the scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConstColumnIndicesDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter called on <computeroutput>column_indices_pointer</computeroutput> when the last table that refers it is out of the scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConstRowOffsetsDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter called on <computeroutput>row_offsets_pointer</computeroutput> when the last table that refers it is out of the scope.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to values block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_indices_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to column indices block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_offsets_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to row offsets block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows in the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns in the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The deleter that is called on the <computeroutput>data_pointer</computeroutput> when the last table that refers it is out of the scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_indices_deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The deleter that is called on the <computeroutput>column_indices_pointer</computeroutput> when the last table that refers it is out of the scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_offsets_deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The deleter that is called on the <computeroutput>row_offsets_pointer</computeroutput> when the last table that refers it is out of the scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexing</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexing scheme used to access data in the CSR layout. Should be :literal:<computeroutput>sparse_indexing::zero_based</computeroutput> or :literal:<computeroutput>sparse_indexing::one_based</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="190" column="5" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" bodystart="190" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a446edb69207210ff29c185d000e6af29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Data</type>
          </param>
          <param>
            <type>typename ConstDataDeleter</type>
          </param>
          <param>
            <type>typename ConstColumnIndicesDeleter</type>
          </param>
          <param>
            <type>typename ConstRowOffsetsDeleter</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>csr_table</definition>
        <argsstring>(sycl::queue &amp;queue, const Data *data_pointer, const std::int64_t *column_indices_pointer, const std::int64_t *row_offsets_pointer, std::int64_t row_count, std::int64_t column_count, ConstDataDeleter &amp;&amp;data_deleter, ConstColumnIndicesDeleter &amp;&amp;column_indices_deleter, ConstRowOffsetsDeleter &amp;&amp;row_offsets_deleter, sparse_indexing indexing=sparse_indexing::one_based, const std::vector&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>csr_table</name>
        <qualifiedname>oneapi::dal::v1::csr_table::csr_table</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const Data *</type>
          <declname>data_pointer</declname>
        </param>
        <param>
          <type>const std::int64_t *</type>
          <declname>column_indices_pointer</declname>
        </param>
        <param>
          <type>const std::int64_t *</type>
          <declname>row_offsets_pointer</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>row_count</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>column_count</declname>
        </param>
        <param>
          <type>ConstDataDeleter &amp;&amp;</type>
          <declname>data_deleter</declname>
        </param>
        <param>
          <type>ConstColumnIndicesDeleter &amp;&amp;</type>
          <declname>column_indices_deleter</declname>
        </param>
        <param>
          <type>ConstRowOffsetsDeleter &amp;&amp;</type>
          <declname>row_offsets_deleter</declname>
        </param>
        <param>
          <type>sparse_indexing</type>
          <declname>indexing</declname>
          <defval>sparse_indexing::one_based</defval>
        </param>
        <param>
          <type>const std::vector&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new <computeroutput><ref refid="classoneapi_1_1dal_1_1v1_1_1csr__table" kindref="compound">csr_table</ref></computeroutput> instance from externally-defined data blocks. Table object owns the data, column indices and row offsets pointers. The :literal:<computeroutput>data</computeroutput> should point to the <computeroutput>data_pointer</computeroutput> memory block. The :literal:<computeroutput>column_indices</computeroutput> should point to the <computeroutput>column_indices_pointer</computeroutput> memory block. The :literal:<computeroutput>row_offsets</computeroutput> should point to the <computeroutput>row_offsets_pointer</computeroutput> memory block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the data block that will be stored into the table. The :literal:<computeroutput>Data</computeroutput> type should be at least :expr:<computeroutput>float</computeroutput>, :expr:<computeroutput>double</computeroutput> or :expr:<computeroutput>std::int32_t</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConstDataDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter called on <computeroutput>data_pointer</computeroutput> when the last table that refers it is out of the scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConstColumnIndicesDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter called on <computeroutput>column_indices_pointer</computeroutput> when the last table that refers it is out of the scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ConstRowOffsetsDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter called on <computeroutput>row_offsets_pointer</computeroutput> when the last table that refers it is out of the scope.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to values block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_indices_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to column indices block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_offsets_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to row offsets block in the CSR layout. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows in the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns in the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The deleter that is called on the <computeroutput>data_pointer</computeroutput> when the last table that refers it is out of the scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column_indices_deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The deleter that is called on the <computeroutput>column_indices_pointer</computeroutput> when the last table that refers it is out of the scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_offsets_deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The deleter that is called on the <computeroutput>row_offsets_pointer</computeroutput> when the last table that refers it is out of the scope. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexing</parametername>
</parameternamelist>
<parameterdescription>
<para>The indexing scheme used to access data in the CSR layout. Should be :literal:<computeroutput>sparse_indexing::zero_based</computeroutput> or :literal:<computeroutput>sparse_indexing::one_based</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events indicating availability of the :literal:<computeroutput>data</computeroutput>, :literal:<computeroutput>columns_indices</computeroutput> and :literal:<computeroutput>row_offsets</computeroutput> for reading or writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="269" column="5" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" bodystart="269" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a07b5fdf1f97bc88ab939443e4dc7f3a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::int64_t</type>
        <definition>std::int64_t get_kind</definition>
        <argsstring>() const</argsstring>
        <name>get_kind</name>
        <qualifiedname>oneapi::dal::v1::csr_table::get_kind</qualifiedname>
        <briefdescription>
<para>The unique id of the csr table type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="342" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" bodystart="342" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a81a8466d1776977fd989f9006d608711" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int64_t</type>
        <definition>std::int64_t get_non_zero_count</definition>
        <argsstring>() const</argsstring>
        <name>get_non_zero_count</name>
        <qualifiedname>oneapi::dal::v1::csr_table::get_non_zero_count</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The number of non-zero elements in the table. <simplesect kind="remark"><para>default = 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="348" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1ae128ff582dc2a21d296734f38d7d58fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>sparse_indexing</type>
        <definition>sparse_indexing get_indexing</definition>
        <argsstring>() const</argsstring>
        <name>get_indexing</name>
        <qualifiedname>oneapi::dal::v1::csr_table::get_indexing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The indexing scheme used to access data in the CSR layout. <simplesect kind="remark"><para>default = :expr:<computeroutput>sparse_indexing::one_based</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="352" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a5ac0c3b03a1da2da935ffa23fe81b6c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Data</type>
          </param>
        </templateparamlist>
        <type>const Data *</type>
        <definition>const Data * get_data</definition>
        <argsstring>() const</argsstring>
        <name>get_data</name>
        <qualifiedname>oneapi::dal::v1::csr_table::get_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the :literal:<computeroutput>data</computeroutput> pointer cast to the :literal:<computeroutput>Data</computeroutput> type. No checks are performed that this type is the actual type of the data within the table. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="357" column="16" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" bodystart="357" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a95776562b3a7d78d905f03ba57397ae4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * get_data</definition>
        <argsstring>() const</argsstring>
        <name>get_data</name>
        <qualifiedname>oneapi::dal::v1::csr_table::get_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The pointer to the data block within the table. Should be equal to <computeroutput>nullptr</computeroutput> when :expr:<computeroutput>row_count == 0</computeroutput> and :expr:<computeroutput>column_count == 0</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="363" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a2a7f9593e4fa1a09811f2a0d329fc1a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::int64_t *</type>
        <definition>const std::int64_t * get_column_indices</definition>
        <argsstring>() const</argsstring>
        <name>get_column_indices</name>
        <qualifiedname>oneapi::dal::v1::csr_table::get_column_indices</qualifiedname>
        <briefdescription>
<para>Returns the :literal:<computeroutput>column_indices</computeroutput> pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="366" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1ae23e1bdccccf70fe1ec737cbd04bb194" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::int64_t *</type>
        <definition>const std::int64_t * get_row_offsets</definition>
        <argsstring>() const</argsstring>
        <name>get_row_offsets</name>
        <qualifiedname>oneapi::dal::v1::csr_table::get_row_offsets</qualifiedname>
        <briefdescription>
<para>Returns the :literal:<computeroutput>row_offsets</computeroutput> pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="369" column="24"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1ab784ad1e1ff3a0cc706f6e1dbe2b7c00" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csr_table</definition>
        <argsstring>(detail::csr_table_iface *impl)</argsstring>
        <name>csr_table</name>
        <qualifiedname>oneapi::dal::v1::csr_table::csr_table</qualifiedname>
        <param>
          <type>detail::csr_table_iface *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="372" column="14" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" bodystart="372" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a85a600eb1cc72bb8dbb2c27eecbb02a3" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>csr_table</definition>
        <argsstring>(const detail::shared&lt; detail::csr_table_iface &gt; &amp;impl)</argsstring>
        <name>csr_table</name>
        <qualifiedname>oneapi::dal::v1::csr_table::csr_table</qualifiedname>
        <param>
          <type>const detail::shared&lt; detail::csr_table_iface &gt; &amp;</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="373" column="14" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" bodystart="373" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1a33e02a51ecfe52b580db86c027f6ab8e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Data</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void init_impl</definition>
        <argsstring>(const dal::array&lt; Data &gt; &amp;data, const dal::array&lt; std::int64_t &gt; &amp;column_indices, const dal::array&lt; std::int64_t &gt; &amp;row_offsets, std::int64_t column_count, sparse_indexing indexing)</argsstring>
        <name>init_impl</name>
        <qualifiedname>oneapi::dal::v1::csr_table::init_impl</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; Data &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; std::int64_t &gt; &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; std::int64_t &gt; &amp;</type>
          <declname>row_offsets</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>column_count</declname>
        </param>
        <param>
          <type>sparse_indexing</type>
          <declname>indexing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="383" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" bodystart="383" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1aa3aa0c8111cc52a162f6c770bb618084" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_impl</definition>
        <argsstring>(const dal::array&lt; byte_t &gt; &amp;data, const dal::array&lt; std::int64_t &gt; &amp;column_indices, const dal::array&lt; std::int64_t &gt; &amp;row_offsets, std::int64_t column_count, const data_type &amp;dtype, sparse_indexing indexing)</argsstring>
        <name>init_impl</name>
        <qualifiedname>oneapi::dal::v1::csr_table::init_impl</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; byte_t &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; std::int64_t &gt; &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; std::int64_t &gt; &amp;</type>
          <declname>row_offsets</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>column_count</declname>
        </param>
        <param>
          <type>const data_type &amp;</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>sparse_indexing</type>
          <declname>indexing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="400" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1ad1e0a103f7923996352186935087ca2c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_impl</definition>
        <argsstring>(const detail::data_parallel_policy &amp;policy, const dal::array&lt; byte_t &gt; &amp;data, const dal::array&lt; std::int64_t &gt; &amp;column_indices, const dal::array&lt; std::int64_t &gt; &amp;row_offsets, std::int64_t column_count, const data_type &amp;dtype, sparse_indexing indexing, const std::vector&lt; sycl::event &gt; &amp;dependencies)</argsstring>
        <name>init_impl</name>
        <qualifiedname>oneapi::dal::v1::csr_table::init_impl</qualifiedname>
        <param>
          <type>const detail::data_parallel_policy &amp;</type>
          <declname>policy</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; byte_t &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; std::int64_t &gt; &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">dal::array</ref>&lt; std::int64_t &gt; &amp;</type>
          <declname>row_offsets</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>column_count</declname>
        </param>
        <param>
          <type>const data_type &amp;</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>sparse_indexing</type>
          <declname>indexing</declname>
        </param>
        <param>
          <type>const std::vector&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="408" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v1_1_1csr__table_1ab2616d6c73005bbab6d483150d565b40" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int64_t</type>
        <definition>static std::int64_t get_non_zero_count</definition>
        <argsstring>(sycl::queue &amp;queue, const std::int64_t row_count, const std::int64_t *row_offsets, const std::vector&lt; sycl::event &gt; &amp;dependencies)</argsstring>
        <name>get_non_zero_count</name>
        <qualifiedname>oneapi::dal::v1::csr_table::get_non_zero_count</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const std::int64_t</type>
          <declname>row_count</declname>
        </param>
        <param>
          <type>const std::int64_t *</type>
          <declname>row_offsets</declname>
        </param>
        <param>
          <type>const std::vector&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="376" column="25"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>csr_table</label>
        <link refid="classoneapi_1_1dal_1_1v1_1_1csr__table"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>table</label>
        <link refid="classoneapi_1_1dal_1_1v1_1_1table"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>csr_table</label>
        <link refid="classoneapi_1_1dal_1_1v1_1_1csr__table"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>table</label>
        <link refid="classoneapi_1_1dal_1_1v1_1_1table"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" line="25" column="1" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/table/csr.hpp" bodystart="25" bodyend="417"/>
    <listofallmembers>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1ad7d7456f622f6b10d08238b9b348ab9f" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>csr_table</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a2b536e8e9b04143db1a61b4e667f5161" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>csr_table</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a34a49aab99ca19a1ebdbea4b3345fef4" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>csr_table</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a3eb4de3c6ed770ee44b372ce2dcf56f7" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>csr_table</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a446edb69207210ff29c185d000e6af29" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>csr_table</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1ab784ad1e1ff3a0cc706f6e1dbe2b7c00" prot="private" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>csr_table</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a85a600eb1cc72bb8dbb2c27eecbb02a3" prot="private" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>csr_table</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1ad34b0800ecaa0895cd108af5dcd7bc5f" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>get_column_count</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a2a7f9593e4fa1a09811f2a0d329fc1a3" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>get_column_indices</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a5ac0c3b03a1da2da935ffa23fe81b6c2" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>get_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a95776562b3a7d78d905f03ba57397ae4" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>get_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1a3f81d641450d208d120975d47eb0ffdc" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>get_data_layout</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1ae128ff582dc2a21d296734f38d7d58fa" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>get_indexing</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a07b5fdf1f97bc88ab939443e4dc7f3a5" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>get_kind</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1a51e121177d2156caa5216466fd442196" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>get_metadata</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a81a8466d1776977fd989f9006d608711" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>get_non_zero_count</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1ab2616d6c73005bbab6d483150d565b40" prot="private" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>get_non_zero_count</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1ac3b1b36ddf172f1cf880c4eba11458de" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>get_row_count</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1ae23e1bdccccf70fe1ec737cbd04bb194" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>get_row_offsets</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1af1c5bdc5bbce021f9e961d76b4a96332" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>has_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a33e02a51ecfe52b580db86c027f6ab8e" prot="private" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>init_impl</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1aa3aa0c8111cc52a162f6c770bb618084" prot="private" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>init_impl</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1ad1e0a103f7923996352186935087ca2c" prot="private" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>init_impl</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1a0c4934cc84529b14ebbc11efc10fb2fd" prot="protected" virt="non-virtual" ambiguityscope="oneapi::dal::v1::table::"><scope>oneapi::dal::v1::csr_table</scope><name>init_impl</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a9ab6fb97fb3e9768781054d12edbaec5" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>kind</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1a45cea1040b952b56c972f0d1b2b125fd" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>operator=</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1a724d5ae9dc3f955ca697e8045556f3b7" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>operator=</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1a5aa7b43c8ec77df216a71a27da0a321c" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>table</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1a33da22635a166f71ccbb7cbd3f26bd39" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>table</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1abc21957128397706260f34647b99ba53" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>table</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1afe55572aaad70e36005dbb284b9db465" prot="protected" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>table</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1a88833a42fc59ad6921de2516b9640792" prot="protected" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>table</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1table_1a321e3a43567c87aae92784fca60ad712" prot="protected" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>validate_input_dimensions</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a546d2730c384f73ed46e519e4e5f8535" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>wrap</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a70f10ef100dd876b9ba32cf6c1ce85c0" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>wrap</name></member>
      <member refid="classoneapi_1_1dal_1_1v1_1_1csr__table_1a4e152ea10559197d33d02ff2f7d4d305" prot="public" virt="non-virtual"><scope>oneapi::dal::v1::csr_table</scope><name>wrap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
