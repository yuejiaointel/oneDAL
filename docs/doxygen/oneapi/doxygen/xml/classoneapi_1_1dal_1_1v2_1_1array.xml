<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classoneapi_1_1dal_1_1v2_1_1array" kind="class" language="C++" prot="public">
    <compoundname>oneapi::dal::v2::array</compoundname>
    <includes refid="array_8hpp" local="no">array.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classoneapi_1_1dal_1_1v2_1_1array_1a9e71c7aeb24b6761edd6d5a16de5f025" prot="private" static="no">
        <type>detail::array_impl&lt; T &gt;</type>
        <definition>using impl_t =  detail::array_impl&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>impl_t</name>
        <qualifiedname>oneapi::dal::v2::array::impl_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="43" column="5" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classoneapi_1_1dal_1_1v2_1_1array_1ac4cb2fbdec251fad52624bfaa993d00c" prot="public" static="no">
        <type>T</type>
        <definition>using data_t =  T</definition>
        <argsstring></argsstring>
        <name>data_t</name>
        <qualifiedname>oneapi::dal::v2::array::data_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="46" column="5" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classoneapi_1_1dal_1_1v2_1_1array_1a6769caf572605b0788f7e59333bb5e5a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class array</definition>
        <argsstring></argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="36" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classoneapi_1_1dal_1_1v2_1_1array_1af382743d9ce828d3b0b5b7383030b5b2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class chunked_array</definition>
        <argsstring></argsstring>
        <name>chunked_array</name>
        <qualifiedname>oneapi::dal::v2::array::chunked_array</qualifiedname>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1chunked__array" kindref="compound">chunked_array</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="39" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classoneapi_1_1dal_1_1v2_1_1array_1a685c662e5e84a8a786027a4263ef38d1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class chunked_array_base</definition>
        <argsstring></argsstring>
        <name>chunked_array_base</name>
        <qualifiedname>oneapi::dal::v2::array::chunked_array_base</qualifiedname>
        <param>
          <type>chunked_array_base</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="41" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classoneapi_1_1dal_1_1v2_1_1array_1ac4cb3f1c8160b8f0e93773f4cbe9668e" prot="private" static="no" mutable="no">
        <type>detail::unique&lt; impl_t &gt;</type>
        <definition>detail::unique&lt;impl_t&gt; impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <qualifiedname>oneapi::dal::v2::array::impl_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="723" column="20" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="723" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoneapi_1_1dal_1_1v2_1_1array_1a2091b8a78ab7a05835d5581bec2d9dc6" prot="private" static="no" mutable="no">
        <type>const T *</type>
        <definition>const T* data_ptr_</definition>
        <argsstring></argsstring>
        <name>data_ptr_</name>
        <qualifiedname>oneapi::dal::v2::array::data_ptr_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="724" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoneapi_1_1dal_1_1v2_1_1array_1a670845c0df48b1f63da431406af2efa3" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* mutable_data_ptr_</definition>
        <argsstring></argsstring>
        <name>mutable_data_ptr_</name>
        <qualifiedname>oneapi::dal::v2::array::mutable_data_ptr_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="725" column="7" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoneapi_1_1dal_1_1v2_1_1array_1a232e5dc46fa77dc3447a7356eed465eb" prot="private" static="no" mutable="no">
        <type>std::int64_t</type>
        <definition>std::int64_t count_</definition>
        <argsstring></argsstring>
        <name>count_</name>
        <qualifiedname>oneapi::dal::v2::array::count_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="726" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="726" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a84a1fba72ce08c1f5912c417428bf784" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt;</type>
        <definition>static array&lt; T &gt; empty</definition>
        <argsstring>(std::int64_t count)</argsstring>
        <name>empty</name>
        <qualifiedname>oneapi::dal::v2::array::empty</qualifiedname>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new memory block for mutable data, does not initialize it, creates a new array instance by passing a pointer to the memory block. The array owns the memory block (for details, see :txtref:<computeroutput>data_ownership_requirements</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> to allocate memory for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="54" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a1f1966484fa3caeadbb56e3dbc82cd33" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt;</type>
        <definition>static array&lt; T &gt; empty</definition>
        <argsstring>(const sycl::queue &amp;queue, std::int64_t count, const sycl::usm::alloc &amp;alloc=sycl::usm::alloc::shared)</argsstring>
        <name>empty</name>
        <qualifiedname>oneapi::dal::v2::array::empty</qualifiedname>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const sycl::usm::alloc &amp;</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new memory block for mutable data, does not initialize it, creates a new array instance by passing a pointer to the memory block. The array owns the memory block (for details, see :txtref:<computeroutput>data_ownership_requirements</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>T</computeroutput> to allocate memory for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind of USM to be allocated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="69" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="69" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a265185a44c3c54d768b1f4c04998001d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt;</type>
        <definition>static array&lt; T &gt; full</definition>
        <argsstring>(std::int64_t count, K &amp;&amp;element)</argsstring>
        <name>full</name>
        <qualifiedname>oneapi::dal::v2::array::full</qualifiedname>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>K &amp;&amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new memory block for mutable data, fills it with a scalar value, creates a new array instance by passing a pointer to the memory block. The array owns the memory block (for details, see :txtref:<computeroutput>data_ownership_requirements</computeroutput>).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Element</parametername>
</parameternamelist>
<parameterdescription>
<para>The type from which array elements of type :literal:<computeroutput>T</computeroutput> can be constructed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>T</computeroutput> to allocate memory for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>The value that is used to fill a memory block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para>Elements of type <computeroutput>T</computeroutput> are constructible from the <computeroutput>Element</computeroutput> type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="89" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="89" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a5a6ab6db33ab536b992bd97ea5798317" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt;</type>
        <definition>static array&lt; T &gt; full</definition>
        <argsstring>(sycl::queue &amp;queue, std::int64_t count, K &amp;&amp;element, const sycl::usm::alloc &amp;alloc=sycl::usm::alloc::shared)</argsstring>
        <name>full</name>
        <qualifiedname>oneapi::dal::v2::array::full</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>K &amp;&amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const sycl::usm::alloc &amp;</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new memory block for mutable data, fills it with a scalar value, creates a new array instance by passing a pointer to the memory block. The array owns the memory block (for details, see :txtref:<computeroutput>data_ownership_requirements</computeroutput>).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Element</parametername>
</parameternamelist>
<parameterdescription>
<para>The type from which array elements of type :literal:<computeroutput>Data</computeroutput> can be constructed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> to allocate memory for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>The value that is used to fill a memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind of USM to be allocated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para>Elements of type <computeroutput>Data</computeroutput> are constructible from the <computeroutput>Element</computeroutput> type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="110" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="110" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a73e6352019c6e544405832e904a2208c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt;</type>
        <definition>static array&lt; T &gt; zeros</definition>
        <argsstring>(std::int64_t count)</argsstring>
        <name>zeros</name>
        <qualifiedname>oneapi::dal::v2::array::zeros</qualifiedname>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new memory block on mutable data, fills it with zeros, creates a new array instance by passing a pointer to the memory block. The array owns the memory block (for details, see :txtref:<computeroutput>data_ownership_requirements</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> to allocate memory for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="127" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="127" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a7be4fbb081c018b2a8b0cd7408dad8d5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt;</type>
        <definition>static array&lt; T &gt; zeros</definition>
        <argsstring>(sycl::queue &amp;queue, std::int64_t count, const sycl::usm::alloc &amp;alloc=sycl::usm::alloc::shared)</argsstring>
        <name>zeros</name>
        <qualifiedname>oneapi::dal::v2::array::zeros</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const sycl::usm::alloc &amp;</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new memory block on mutable data, fills it with zeros, creates a new array instance by passing a pointer to the memory block. The array owns the memory block (for details, see :txtref:<computeroutput>data_ownership_requirements</computeroutput>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>T</computeroutput> to allocate memory for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind of USM to be allocated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="143" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="143" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a09129c2b2b77a8498df3cb8b9ff6223b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt;</type>
        <definition>static array&lt; T &gt; wrap</definition>
        <argsstring>(Y *data, std::int64_t count)</argsstring>
        <name>wrap</name>
        <qualifiedname>oneapi::dal::v2::array::wrap</qualifiedname>
        <param>
          <type>Y *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance by passing the pointer to externally-allocated memory block for mutable data. It is the responsibility of the calling application to free the memory block as the array does not free it when the reference count is zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> in the memory block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>data != nullptr</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="163" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a55da07e77656da12ae6d97915c455718" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt;</type>
        <definition>static array&lt; T &gt; wrap</definition>
        <argsstring>(Y *data, std::int64_t count, const std::vector&lt; sycl::event &gt; &amp;dependencies)</argsstring>
        <name>wrap</name>
        <qualifiedname>oneapi::dal::v2::array::wrap</qualifiedname>
        <param>
          <type>Y *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const std::vector&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance by passing the pointer to externally-allocated memory block for mutable data. It is the responsibility of the calling application to free the memory block as the array does not free it when the reference count is zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> in the memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events indicating availability of the :literal:<computeroutput>Data</computeroutput> for reading or writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>data != nullptr</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="178" column="19" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="178" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a9a4490ca7a13627d3d81907276f32505" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt;</type>
        <definition>static array&lt; T &gt; wrap</definition>
        <argsstring>(const sycl::queue &amp;queue, Y *data, std::int64_t count, const std::vector&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>wrap</name>
        <qualifiedname>oneapi::dal::v2::array::wrap</qualifiedname>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>Y *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const std::vector&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance by passing the pointer to externally-allocated memory block for mutable data. It is the responsibility of the calling application to free the memory block as the array does not free it when the reference count is zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>T</computeroutput> in the memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events indicating availability of the :literal:<computeroutput>Data</computeroutput> for reading or writing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>data != nullptr</computeroutput> </para>
</simplesect>
<simplesect kind="pre"><para>:expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="198" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="198" bodyend="203"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a9cbcfcbf0173e1edaf4094bb36b34b31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>array</definition>
        <argsstring>()</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new instance of the class without memory allocation: :literal:<computeroutput>mutable_data</computeroutput> and :literal:<computeroutput>data</computeroutput> pointers should be set to <computeroutput>nullptr</computeroutput>, :literal:<computeroutput>count</computeroutput> should be zero; the pointer to the ownership structure should be set to <computeroutput>nullptr</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="209" column="5" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1ada402f115d2a7d9b5bcc9943bd4b3b7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>array</definition>
        <argsstring>(const array&lt; T &gt; &amp;other)</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Creates a new array instance that shares an ownership with :literal:<computeroutput>other</computeroutput> on its memory block. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="214" column="5" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="214" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a94ab67d8f7cd7b07585d617eb99c1397" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>array</definition>
        <argsstring>(array&lt; T &gt; &amp;&amp;other)</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Moves :literal:<computeroutput>data</computeroutput>, :literal:<computeroutput>mutable_data</computeroutput> pointers, :literal:<computeroutput>count</computeroutput>, and pointer to the ownership structure in :literal:<computeroutput>other</computeroutput> to the new array instance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="220" column="5" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a88813a01a26856341baba25d6e214ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~array</definition>
        <argsstring>()=default</argsstring>
        <name>~array</name>
        <qualifiedname>oneapi::dal::v2::array::~array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="226" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1ab7862e25f478decf9bb54c12a32e328c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Deleter</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>array</definition>
        <argsstring>(T *data, std::int64_t count, Deleter &amp;&amp;deleter)</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>Deleter &amp;&amp;</type>
          <declname>deleter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance which owns a memory block of externally-allocated mutable data. The ownership structure is created for a block, the input :literal:<computeroutput>deleter</computeroutput> is assigned to it.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter used to free the :literal:<computeroutput>Data</computeroutput>. The deleter provides <computeroutput>void operator()(Data*)</computeroutput> member function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> in the memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The object used to free :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="239" column="14" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="239" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1ad59434d70adbcd43cf0e5f71e2c58196" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Deleter</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>array</definition>
        <argsstring>(const sycl::queue &amp;queue, T *data, std::int64_t count, Deleter &amp;&amp;deleter, const std::vector&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>Deleter &amp;&amp;</type>
          <declname>deleter</declname>
        </param>
        <param>
          <type>const std::vector&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance which owns a memory block of externally-allocated mutable data. The ownership structure is created for a block, the input :literal:<computeroutput>deleter</computeroutput> is assigned to it.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter used to free the :literal:<computeroutput>Data</computeroutput>. The deleter provides <computeroutput>void operator()(Data*)</computeroutput> member function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> in the memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The object used to free :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events that indicate when :literal:<computeroutput>Data</computeroutput> becomes ready to be read or written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="261" column="14" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="261" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1adef4871d21ed526420ee7c52491e1aa2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstDeleter</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>array</definition>
        <argsstring>(const T *data, std::int64_t count, ConstDeleter &amp;&amp;deleter)</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>ConstDeleter &amp;&amp;</type>
          <declname>deleter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance which owns a memory block of externally-allocated immutable data. The ownership structure is created for a block, the input :literal:<computeroutput>deleter</computeroutput> is assigned to it.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConstDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter used to free the :literal:<computeroutput>Data</computeroutput>. The deleter implements <computeroutput>void operator()(const Data*)</computeroutput> member function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> in the :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The object used to free :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="288" column="14" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="288" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a08fc711a16cf024ec21c13281f1fe7fc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstDeleter</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>array</definition>
        <argsstring>(const sycl::queue &amp;queue, const T *data, std::int64_t count, ConstDeleter &amp;&amp;deleter, const std::vector&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>ConstDeleter &amp;&amp;</type>
          <declname>deleter</declname>
        </param>
        <param>
          <type>const std::vector&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance which owns a memory block of externally-allocated immutable data. The ownership structure is created for a block, the input :literal:<computeroutput>deleter</computeroutput> is assigned to it.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConstDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter used to free the :literal:<computeroutput>Data</computeroutput>. The deleter implements <computeroutput>void operator()(const Data*)</computeroutput> member function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> in the :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The object used to free :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events that indicate when :literal:<computeroutput>Data</computeroutput> becomes ready to be read or written </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="310" column="14" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="310" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a0af71aa365adaa41dd255c39cc858581" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>array</definition>
        <argsstring>(const std::shared_ptr&lt; T &gt; &amp;data, std::int64_t count)</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance that shares ownership with the user-provided shared pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> in the memory block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="330" column="14" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1aaca206bea9f0e3518a64f575c14fe2c3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>array</definition>
        <argsstring>(const sycl::queue &amp;queue, const std::shared_ptr&lt; T &gt; &amp;data, std::int64_t count, const std::vector&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const std::vector&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance that shares ownership with the user-provided shared pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> in the memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events that indicate when :literal:<computeroutput>Data</computeroutput> becomes ready to be read or written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="342" column="14" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="342" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a0ec50eb615563a24c3649a40aa941543" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>array</definition>
        <argsstring>(const std::shared_ptr&lt; const T &gt; &amp;data, std::int64_t count)</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; const T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance that shares ownership with the user-provided shared pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> in the memory block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="358" column="14" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a2b8dc0a41f66120ea55858ba1ccb6fc3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>array</definition>
        <argsstring>(const sycl::queue &amp;queue, const std::shared_ptr&lt; const T &gt; &amp;data, std::int64_t count, const std::vector&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; const T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const std::vector&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new array instance that shares ownership with the user-provided shared pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The shared pointer to externally-allocated memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> in the memory block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events that indicate when :literal:<computeroutput>Data</computeroutput> becomes ready to be read or written </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="371" column="14" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="371" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1af68d6d48bc105166655c123304694c54" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>array</definition>
        <argsstring>(const array&lt; Y &gt; &amp;ref, K *data, std::int64_t count)</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; Y &gt; &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>K *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An aliasing constructor: creates a new array instance that stores :literal:<computeroutput>Data</computeroutput> pointer, assigns the pointer to the ownership structure of :literal:<computeroutput>ref</computeroutput> to the new instance. Array returns :literal:<computeroutput>Data</computeroutput> pointer as its mutable or immutable block depending on the :literal:<computeroutput>Data</computeroutput> type.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the referenced array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>Either :literal:<computeroutput>T</computeroutput> or $const T$ type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The array which shares ownership structure with created one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable or immutable unmanaged pointer hold by created array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>T</computeroutput> in the :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:expr:<computeroutput>std::is_same_v&lt;data, const T&gt; || std::is_same_v&lt;data, T&gt;</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="396" column="14" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="396" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a1e08911f35dc4e952fccca3fccd8b04c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt; &amp;</type>
        <definition>array&lt; T &gt; &amp; operator=</definition>
        <argsstring>(const array&lt; T &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>oneapi::dal::v2::array::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces the :literal:<computeroutput>data</computeroutput>, :literal:<computeroutput>mutable_data</computeroutput> pointers, :literal:<computeroutput>count</computeroutput>, and pointer to the ownership structure in the array instance by the values in :literal:<computeroutput>other</computeroutput>.</para>
<para><simplesect kind="post"><para>:expr:<computeroutput>data == other.data</computeroutput> </para>
</simplesect>
<simplesect kind="post"><para>:expr:<computeroutput>mutable_data == other.mutable_data</computeroutput> </para>
</simplesect>
<simplesect kind="post"><para>:expr:<computeroutput>count == other.count</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="407" column="11" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="407" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a22d9b2dccc09775e74286e68501b2260" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt; &amp;</type>
        <definition>array&lt; T &gt; &amp; operator=</definition>
        <argsstring>(array&lt; T &gt; &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>oneapi::dal::v2::array::operator=</qualifiedname>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swaps the values of :literal:<computeroutput>data</computeroutput>, :literal:<computeroutput>mutable_data</computeroutput> pointers, :literal:<computeroutput>count</computeroutput>, and pointer to the ownership structure in the array instance and :literal:<computeroutput>other</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="415" column="11" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="415" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a11817a99df7e5d0ccbbbe985e6333103" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * get_mutable_data</definition>
        <argsstring>() const</argsstring>
        <name>get_mutable_data</name>
        <qualifiedname>oneapi::dal::v2::array::get_mutable_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The pointer to the memory block holding mutable data. <simplesect kind="pre"><para>:expr:<computeroutput><ref refid="classoneapi_1_1dal_1_1v2_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" kindref="member">has_mutable_data()</ref> == true</computeroutput>, othewise throws <computeroutput>domain_error</computeroutput> </para>
</simplesect>
<simplesect kind="invariant"><para>:expr:<computeroutput>mutable_data != nullptr</computeroutput> if :expr:<computeroutput><ref refid="classoneapi_1_1dal_1_1v2_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" kindref="member">has_mutable_data()</ref> &amp;&amp; count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="423" column="7" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="423" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a89e9d9544811217f17db1dd6ad390007" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T * get_data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_data</name>
        <qualifiedname>oneapi::dal::v2::array::get_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The pointer to the memory block holding immutable data. <simplesect kind="invariant"><para>:expr:<computeroutput>data != nullptr</computeroutput> if :expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
<simplesect kind="invariant"><para>if :expr:<computeroutput><ref refid="classoneapi_1_1dal_1_1v2_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" kindref="member">has_mutable_data()</ref> == true</computeroutput> then :expr:<computeroutput>data == mutable_data</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="433" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="433" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool has_mutable_data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>has_mutable_data</name>
        <qualifiedname>oneapi::dal::v2::array::has_mutable_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns whether array contains :literal:<computeroutput>mutable_data</computeroutput> or not</para>
<para><simplesect kind="invariant"><para>:expr:<computeroutput>mutable_data != nullptr</computeroutput> if this returns <computeroutput>true</computeroutput> and :expr:<computeroutput>count &gt; 0</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="440" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="440" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a18a8a7da99c4d33572fe2368bc0799af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref> &amp;</type>
        <definition>array &amp; need_mutable_data</definition>
        <argsstring>()</argsstring>
        <name>need_mutable_data</name>
        <qualifiedname>oneapi::dal::v2::array::need_mutable_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns mutable_data, if array contains it. Otherwise, allocates a memory block for mutable data and fills it with the data stored at :literal:<computeroutput>data</computeroutput>. Creates the ownership structure for allocated memory block and stores the pointer.</para>
<para><simplesect kind="post"><para>:expr:<computeroutput><ref refid="classoneapi_1_1dal_1_1v2_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" kindref="member">has_mutable_data()</ref> == true</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="450" column="11" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="450" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a49c428b779e355f9c320e73a8cdfff99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref> &amp;</type>
        <definition>array &amp; need_mutable_data</definition>
        <argsstring>(sycl::queue &amp;queue, const sycl::usm::alloc &amp;alloc=sycl::usm::alloc::shared)</argsstring>
        <name>need_mutable_data</name>
        <qualifiedname>oneapi::dal::v2::array::need_mutable_data</qualifiedname>
        <param>
          <type>sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const sycl::usm::alloc &amp;</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns mutable_data, if array contains it. Otherwise, allocates a memory block for mutable data and fills it with the data stored at :literal:<computeroutput>data</computeroutput>. Creates the ownership structure for allocated memory block and stores the pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind of USM to be allocated</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>:expr:<computeroutput><ref refid="classoneapi_1_1dal_1_1v2_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" kindref="member">has_mutable_data()</ref> == true</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="466" column="12" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="466" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a3f1207c28eca55d0d45ba1a131eacacd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::int64_t</type>
        <definition>std::int64_t get_count</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_count</name>
        <qualifiedname>oneapi::dal::v2::array::get_count</qualifiedname>
        <briefdescription>
<para>The number of elements of type :literal:<computeroutput>T</computeroutput> in a memory block. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="477" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="477" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a166b39e55d0cd37657028e5dda117158" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::int64_t</type>
        <definition>std::int64_t get_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_size</name>
        <qualifiedname>oneapi::dal::v2::array::get_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The size of memory block in bytes <simplesect kind="invariant"><para>:expr:<computeroutput>size == count * sizeof(T)</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="483" column="18" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="483" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1ad20897c5c8bd47f5d4005989bead0e55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>oneapi::dal::v2::array::reset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resets ownership structure pointer to <computeroutput>nullptr</computeroutput>, sets :literal:<computeroutput>count</computeroutput> to zero, :literal:<computeroutput>data</computeroutput> and :literal:<computeroutput>mutable_data</computeroutput> to :expr:<computeroutput>nullptr</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="489" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="489" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1aa19a2be06fbcdae44b178a2ff87879f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(std::int64_t count)</argsstring>
        <name>reset</name>
        <qualifiedname>oneapi::dal::v2::array::reset</qualifiedname>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new memory block for mutable data, does not initialize it, creates ownership structure for this block, assigns the structure inside the array. The array owns allocated memory block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> to allocate memory for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="499" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="499" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1ac607b8725723eb1714df52f315886d47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(const sycl::queue &amp;queue, std::int64_t count, const sycl::usm::alloc &amp;alloc=sycl::usm::alloc::shared)</argsstring>
        <name>reset</name>
        <qualifiedname>oneapi::dal::v2::array::reset</qualifiedname>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const sycl::usm::alloc &amp;</type>
          <declname>alloc</declname>
          <defval>sycl::usm::alloc::shared</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates a new memory block for mutable data, does not initialize it, creates ownership structure for this block, assigns the structure inside the array. The array owns allocated memory block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>T</computeroutput> to allocate memory for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind of USM to be allocated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="512" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="512" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a142ba6eaf497fff10978abcaa5fea510" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Deleter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(T *data, std::int64_t count, Deleter &amp;&amp;deleter)</argsstring>
        <name>reset</name>
        <qualifiedname>oneapi::dal::v2::array::reset</qualifiedname>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>Deleter &amp;&amp;</type>
          <declname>deleter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates the ownership structure for memory block of externally-allocated mutable data, assigns input :literal:<computeroutput>deleter</computeroutput> object to it, sets :literal:<computeroutput>data</computeroutput> and :literal:<computeroutput>mutable_data</computeroutput> pointers to this block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter used to free the :literal:<computeroutput>Data</computeroutput>. The deleter implements <computeroutput>void operator()(Data*)</computeroutput> member function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable memory block pointer to be assigned inside the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> into the block </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The object used to free :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="533" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="533" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a9ffa7bf74a5ed282fa8c43a9f2b34f67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Deleter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(const sycl::queue &amp;queue, T *data, std::int64_t count, Deleter &amp;&amp;deleter, const std::vector&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>reset</name>
        <qualifiedname>oneapi::dal::v2::array::reset</qualifiedname>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>Deleter &amp;&amp;</type>
          <declname>deleter</declname>
        </param>
        <param>
          <type>const std::vector&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates the ownership structure for memory block of externally-allocated mutable data, assigns input :literal:<computeroutput>deleter</computeroutput> object to it, sets :literal:<computeroutput>data</computeroutput> and :literal:<computeroutput>mutable_data</computeroutput> pointers to this block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter used to free the :literal:<computeroutput>Data</computeroutput>. The deleter implements <computeroutput>void operator()(Data*)</computeroutput> member function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutable memory block pointer to be assigned inside the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> into the block </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The object used to free :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events that indicate when :literal:<computeroutput>Data</computeroutput> becomes ready to be read or written </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="553" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="553" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a9ae54014693dfb694c6e24b8d74fc7da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstDeleter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(const T *data, std::int64_t count, ConstDeleter &amp;&amp;deleter)</argsstring>
        <name>reset</name>
        <qualifiedname>oneapi::dal::v2::array::reset</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>ConstDeleter &amp;&amp;</type>
          <declname>deleter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates the ownership structure for memory block of externally-allocated immutable data, assigns input :literal:<computeroutput>deleter</computeroutput> object to it, sets :literal:<computeroutput>data</computeroutput> pointer to this block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConstDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter used to free. The deleter implements <computeroutput>void operator()(const Data*)</computeroutput>` member function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The immutable memory block pointer to be assigned inside the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> into the block </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The object used to free :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="580" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="580" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1ac6b708ace66efde50282b417104c323a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConstDeleter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(const sycl::queue &amp;queue, const T *data, std::int64_t count, ConstDeleter &amp;&amp;deleter, const std::vector&lt; sycl::event &gt; &amp;dependencies={})</argsstring>
        <name>reset</name>
        <qualifiedname>oneapi::dal::v2::array::reset</qualifiedname>
        <param>
          <type>const sycl::queue &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>ConstDeleter &amp;&amp;</type>
          <declname>deleter</declname>
        </param>
        <param>
          <type>const std::vector&lt; sycl::event &gt; &amp;</type>
          <declname>dependencies</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates the ownership structure for memory block of externally-allocated immutable data, assigns input :literal:<computeroutput>deleter</computeroutput> object to it, sets :literal:<computeroutput>data</computeroutput> pointer to this block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ConstDeleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of a deleter used to free. The deleter implements <computeroutput>void operator()(const Data*)</computeroutput>` member function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The SYCL* queue object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The immutable memory block pointer to be assigned inside the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>Data</computeroutput> into the block </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deleter</parametername>
</parameternamelist>
<parameterdescription>
<para>The object used to free :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dependencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Events that indicate when :literal:<computeroutput>Data</computeroutput> becomes ready to be read or written </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="603" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="603" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1ad37313216c8052e6a8bfe83fc1d107c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(const array&lt; Y &gt; &amp;ref, T *data, std::int64_t count)</argsstring>
        <name>reset</name>
        <qualifiedname>oneapi::dal::v2::array::reset</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; Y &gt; &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes :literal:<computeroutput>data</computeroutput> and :literal:<computeroutput>mutable_data</computeroutput> with data pointer, :literal:<computeroutput>count</computeroutput> with input :literal:<computeroutput>count</computeroutput> value, initializes the pointer to ownership structure with the one from ref. Array returns :literal:<computeroutput>Data</computeroutput> pointer as its mutable block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the referenced array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The array which is used to share ownership structure with current one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutable unmanaged pointer to be assigned to the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>T</computeroutput> in the :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="630" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="630" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1ade1bf84bfefd14905b05a32fa944f352" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void reset</definition>
        <argsstring>(const array&lt; Y &gt; &amp;ref, const T *data, std::int64_t count)</argsstring>
        <name>reset</name>
        <qualifiedname>oneapi::dal::v2::array::reset</qualifiedname>
        <param>
          <type>const <ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; Y &gt; &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes :literal:<computeroutput>data</computeroutput> with data pointer, :literal:<computeroutput>count</computeroutput> with input :literal:<computeroutput>count</computeroutput> value, initializes the pointer to ownership structure with the one from ref. Array returns :literal:<computeroutput>Data</computeroutput> pointer as its immutable block.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Y</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of elements in the referenced array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>The array which is used to share ownership structure with current one. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Immutable unmanaged pointer to be assigned to the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of type :literal:<computeroutput>T</computeroutput> in the :literal:<computeroutput>Data</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="646" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="646" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a5e58983e29c002607a1e068474b20f5d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; operator[]</definition>
        <argsstring>(std::int64_t index) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>oneapi::dal::v2::array::operator[]</qualifiedname>
        <param>
          <type>std::int64_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides a read-only access to the elements of array. Does not perform boundary checks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="653" column="13" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="653" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a3d3ebfd2060a164df9cc0fff0dea1119" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; sycl::queue &gt;</type>
        <definition>std::optional&lt; sycl::queue &gt; get_queue</definition>
        <argsstring>() const</argsstring>
        <name>get_queue</name>
        <qualifiedname>oneapi::dal::v2::array::get_queue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a queue that was used to create array object. If no queue was provided at the array construction phase, returns empty :literal:<computeroutput>std::optional</computeroutput> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="663" column="19" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="663" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1afb4cacc564388a0626cf9b484c87b25e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt;</type>
        <definition>array&lt; T &gt; get_slice</definition>
        <argsstring>(std::int64_t first, std::int64_t last) const</argsstring>
        <name>get_slice</name>
        <qualifiedname>oneapi::dal::v2::array::get_slice</qualifiedname>
        <param>
          <type>std::int64_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Creates slice of this array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="669" column="11" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="669" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a18552ababab819b651196ce202a7fb3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>array</definition>
        <argsstring>(impl_t *impl)</argsstring>
        <name>array</name>
        <qualifiedname>oneapi::dal::v2::array::array</qualifiedname>
        <param>
          <type>impl_t *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
<para>Creates array from impl. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="675" column="5" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="675" bodyend="677"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1ab55eef3f9bcb9236b02b66bcc0604d8a" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void swap</definition>
        <argsstring>(array&lt; T &gt; &amp;a, array&lt; T &gt; &amp;b)</argsstring>
        <name>swap</name>
        <qualifiedname>oneapi::dal::v2::array::swap</qualifiedname>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classoneapi_1_1dal_1_1v2_1_1array" kindref="compound">array</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="680" column="17" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="680" bodyend="685"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a8ba8787bebb66ff35e43ea02bdbdd382" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void update_data</definition>
        <argsstring>(impl_t *impl)</argsstring>
        <name>update_data</name>
        <qualifiedname>oneapi::dal::v2::array::update_data</qualifiedname>
        <param>
          <type>impl_t *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="687" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="687" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1ad12b53e2b19b158448e2bf3009c5c068" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void update_data</definition>
        <argsstring>(const T *data, std::int64_t count) noexcept</argsstring>
        <name>update_data</name>
        <qualifiedname>oneapi::dal::v2::array::update_data</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="696" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="696" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a3c55184c225c19063266831ef79d96ce" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void update_data</definition>
        <argsstring>(T *data, std::int64_t count) noexcept</argsstring>
        <name>update_data</name>
        <qualifiedname>oneapi::dal::v2::array::update_data</qualifiedname>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::int64_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="702" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="702" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a01a67e95968f2e41620fe20c792d76bb" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void reset_data</definition>
        <argsstring>() noexcept</argsstring>
        <name>reset_data</name>
        <qualifiedname>oneapi::dal::v2::array::reset_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="708" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="708" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a86c4da98691368e7a8078cab5d5b073e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(detail::output_archive &amp;ar) const</argsstring>
        <name>serialize</name>
        <qualifiedname>oneapi::dal::v2::array::serialize</qualifiedname>
        <param>
          <type>detail::output_archive &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="714" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="714" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classoneapi_1_1dal_1_1v2_1_1array_1a6fb4a5ab3780ffb50ce420d82ee5629f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void deserialize</definition>
        <argsstring>(detail::input_archive &amp;ar)</argsstring>
        <name>deserialize</name>
        <qualifiedname>oneapi::dal::v2::array::deserialize</qualifiedname>
        <param>
          <type>detail::input_archive &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="718" column="10" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="718" bodyend="721"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the memory block elements within the array. :literal:<computeroutput>T</computeroutput> can represent any type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>:literal:<computeroutput>T</computeroutput> cannot be const-qualified. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" line="29" column="1" bodyfile="/home/runner/work/oneDAL/oneDAL/cpp/oneapi/dal/array.hpp" bodystart="29" bodyend="727"/>
    <listofallmembers>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a6769caf572605b0788f7e59333bb5e5a" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a9cbcfcbf0173e1edaf4094bb36b34b31" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1ada402f115d2a7d9b5bcc9943bd4b3b7e" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a94ab67d8f7cd7b07585d617eb99c1397" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1ab7862e25f478decf9bb54c12a32e328c" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1ad59434d70adbcd43cf0e5f71e2c58196" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1adef4871d21ed526420ee7c52491e1aa2" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a08fc711a16cf024ec21c13281f1fe7fc" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a0af71aa365adaa41dd255c39cc858581" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1aaca206bea9f0e3518a64f575c14fe2c3" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a0ec50eb615563a24c3649a40aa941543" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a2b8dc0a41f66120ea55858ba1ccb6fc3" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1af68d6d48bc105166655c123304694c54" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a18552ababab819b651196ce202a7fb3c" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1af382743d9ce828d3b0b5b7383030b5b2" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>chunked_array</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a685c662e5e84a8a786027a4263ef38d1" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>chunked_array_base</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a232e5dc46fa77dc3447a7356eed465eb" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>count_</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a2091b8a78ab7a05835d5581bec2d9dc6" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>data_ptr_</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1ac4cb2fbdec251fad52624bfaa993d00c" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>data_t</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a6fb4a5ab3780ffb50ce420d82ee5629f" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>deserialize</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a84a1fba72ce08c1f5912c417428bf784" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>empty</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a1f1966484fa3caeadbb56e3dbc82cd33" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>empty</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a265185a44c3c54d768b1f4c04998001d" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>full</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a5a6ab6db33ab536b992bd97ea5798317" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>full</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a3f1207c28eca55d0d45ba1a131eacacd" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>get_count</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a89e9d9544811217f17db1dd6ad390007" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>get_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a11817a99df7e5d0ccbbbe985e6333103" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>get_mutable_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a3d3ebfd2060a164df9cc0fff0dea1119" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>get_queue</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a166b39e55d0cd37657028e5dda117158" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>get_size</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1afb4cacc564388a0626cf9b484c87b25e" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>get_slice</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1abf3eee4b8c629fc34e7b9ecd3a0460ed" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>has_mutable_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1ac4cb3f1c8160b8f0e93773f4cbe9668e" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>impl_</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a9e71c7aeb24b6761edd6d5a16de5f025" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>impl_t</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a670845c0df48b1f63da431406af2efa3" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>mutable_data_ptr_</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a18a8a7da99c4d33572fe2368bc0799af" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>need_mutable_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a49c428b779e355f9c320e73a8cdfff99" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>need_mutable_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a1e08911f35dc4e952fccca3fccd8b04c" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>operator=</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a22d9b2dccc09775e74286e68501b2260" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>operator=</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a5e58983e29c002607a1e068474b20f5d" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>operator[]</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1ad20897c5c8bd47f5d4005989bead0e55" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1aa19a2be06fbcdae44b178a2ff87879f3" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1ac607b8725723eb1714df52f315886d47" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a142ba6eaf497fff10978abcaa5fea510" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a9ffa7bf74a5ed282fa8c43a9f2b34f67" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a9ae54014693dfb694c6e24b8d74fc7da" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1ac6b708ace66efde50282b417104c323a" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1ad37313216c8052e6a8bfe83fc1d107c3" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1ade1bf84bfefd14905b05a32fa944f352" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>reset</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a01a67e95968f2e41620fe20c792d76bb" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>reset_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a86c4da98691368e7a8078cab5d5b073e" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>serialize</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1ab55eef3f9bcb9236b02b66bcc0604d8a" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>swap</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a8ba8787bebb66ff35e43ea02bdbdd382" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>update_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1ad12b53e2b19b158448e2bf3009c5c068" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>update_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a3c55184c225c19063266831ef79d96ce" prot="private" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>update_data</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a09129c2b2b77a8498df3cb8b9ff6223b" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>wrap</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a55da07e77656da12ae6d97915c455718" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>wrap</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a9a4490ca7a13627d3d81907276f32505" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>wrap</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a73e6352019c6e544405832e904a2208c" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>zeros</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a7be4fbb081c018b2a8b0cd7408dad8d5" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>zeros</name></member>
      <member refid="classoneapi_1_1dal_1_1v2_1_1array_1a88813a01a26856341baba25d6e214ede" prot="public" virt="non-virtual"><scope>oneapi::dal::v2::array</scope><name>~array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
